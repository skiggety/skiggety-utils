#!/usr/bin/env bash

# TODO^3: figure out why this sporadically fails to set the prompt
# TODO^7: rename to reflect the fact that we are putting the user in a full shell (which is useful), not just a y/n
# prompt. How about "bash-ask" or "shellask"?

# This script asks the user to do the task described and report status back. It is a great way of stubbing out
# functionality, setting yourself one-off reminders, or....

# BONUS!!: I'm pretty sure it's also a shell/environment debugger. Just write something like this in your code (let's
# say a bash script but you could call it from other languages and inspect environment variables, technically):
#
#     for whatever in $___whatever_the_point_is_you_are_deep_in_code__; do
#         if ask_user "debug and decide whether you want to foo at $(echo_here)"
#         then
#             foo
#         else
#             definitely_do_not_foo
#         fi
#     done
#
# ...and then you can inspect, edit and run anything you need to, and, at the end, you get to control a binary switch
# because in some cases it's helpful to make a human decision a few times before you figure out how to teach^Wprogram
# the computer.


THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"

# including with THIS_DIR instead of SKIGGETY_UTILS_DIR so we can use it in demo_in_docker:
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

debug_here "\$\* is: '$*'"
TASK_DESCRIPTION="$*"
debug_eval_here TASK_DESCRIPTION
ESCAPED_TASK_DESCRIPTION="$(echo "$TASK_DESCRIPTION" | sed 's/\(["\$]\)/\\\1/g')"
debug_eval_here ESCAPED_TASK_DESCRIPTION

# Try running the following to see why this is necessary: ask_user 'spend $0 on "stuff"'.
DOUBLE_ESCAPED_TASK_DESCRIPTION="$(echo "$ESCAPED_TASK_DESCRIPTION" | sed 's/\(["\$]\)/\\\1/g')"
debug_eval_here DOUBLE_ESCAPED_TASK_DESCRIPTION
banner='########################################################################'

# ding
tput bel

bash --rcfile <(cat ~/.bashrc; echo "PS1=\"${newline}$banner${newline}# TODO:${newline}# 1.) ${DOUBLE_ESCAPED_TASK_DESCRIPTION}${newline}# 2.) Run \\\"exit 0\\\" for success/yes, or \\\"exit 1\\\" to say no/failure.${newline}$banner${newline}\$PS1\"") - # IGNORE_TODO
exit $?
