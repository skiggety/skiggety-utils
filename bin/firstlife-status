#!/usr/bin/env bash

# This script displays progress on firstlife

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1
. $SKIGGETY_UTILS_DIR/lib/firstlife.bash || exit_with_error 'could not use common firstlife code'

EXPECTED_PPID=""
while [[ "$1" == -* ]]; do
    if [[ "$1" == '--while-review-pid-latest' ]]; then
        shift
        EXPECTED_PPID="$1"
        shift
    fi
done

# TODO^16: function extract to firstlife.bash
# push everything to the bottom of the terminal
for blank_line_i in $(seq $(tput lines));do
    echo
done

# TODO: exit if after CHILL_TIME, BEDTIME, or maybe control bedtime with a cron marker file, or maybe just be silent
# instead of exiting

today_todo --non-interactive | abbreviate -l 20 # TODO: vital --report | abbreviate -l 20

reward_status="$(firstlife-reward -n)"
echo "$reward_status" | abbreviate -l 6 -t 'firstlife-reward -n'

# EASY? FUN? TODO^52: firstlife-pomodoro -n # to show accumulating pomodoros like rewards for more motivation

# EASY TODO^107: mute during meditation, exercise, shower, pomodoros, breaks, evenings, etc.
# - EASY TODO^11: can also use mute at will
BEHIND_SOUND="$FIRSTLIFE_DIR/sounds/behind.mp3"
BEHIND_SOUND_VOLUME='3' # TODO^6: put in local config with this default:
while ! [ -f $BEHIND_SOUND ]; do
    mkdir -p "$(dirname $BEHIND_SOUND)"
    # TODO: do this in firstlife-setup:
    firstlife-delegate "Please download an sound to let you know you are behind of your choice and put it at $ALARM_SOUND, e.g. \"wget <some-whip-cracking-sound> -O $BEHIND_SOUND\"" \
        || exit_with_error "No sound to let you know you are behind available"
done

MINUTES_OF_INACTIVITY_ALLOWED=15 # TODO^3: make configurable and tune the number
debug_eval_here MINUTES_OF_INACTIVITY_ALLOWED

TARGET_SECONDS_PER_REWARD=$(( 10 * 60 )) # TODO^3: make configurable and tune the number
debug_eval_here TARGET_SECONDS_PER_REWARD

spr="$(echo "$reward_status"| grep 'seconds each' | sed 's/.*at \([0-9]*\) seconds each.*/\1/')"
spr=${spr:-'100000'}
debug_eval_here spr

# TODO: or if no rewards yet:
if [ $spr -gt $TARGET_SECONDS_PER_REWARD ] && test "`find $FIRSTLIFE_LOG_DIR/reward.$(isotoday).log.txt -mmin +$MINUTES_OF_INACTIVITY_ALLOWED 2>/dev/null`"; then
    echo
    if firstlife-is-muted; then
        echo "UH-OH! It seems like you're getting BEHIND! (but firstlife is muted, so this won't emit a sound)"
    else
        echo "UH-OH! It seems like you're getting BEHIND, time to emit a sound: $BEHIND_SOUND"
        mplayer -volume $BEHIND_SOUND_VOLUME $BEHIND_SOUND >/dev/null 2>&1
    fi
    echo "...Also, here's the file with the last timestamp for a reward:"
    ls -lh $FIRSTLIFE_LOG_DIR/reward.$(isotoday).log.txt
fi

if is_another_day; then
    exit_with_error "The day is over, get a run review-firstlife-status again to monitor today's firstlife status"
fi

if ! [ -z "$EXPECTED_PPID" ]; then
    debug_eval EXPECTED_PPID
    echo_debug expecting pid to be the latest review-firstlife-status
    latest_review_ppid=$(cat $FIRSTLIFE_MARKER_DIR/.review-firstlife-status_PPID)
    debug_eval latest_review_ppid
    if ! [ "$latest_review_ppid" -eq "$EXPECTED_PPID" ]; then
        exit_with_error "Exiting since process $latest_review_ppid has taken over"
    fi
fi
