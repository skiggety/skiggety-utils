#!/usr/bin/env ruby
# frozen_string_literal: true

# This program displays output of a given command and refreshes periodically.
# By default, the delay is dynamic so you don't use up too many resources when
# nothing is changing but it is responsive when the output is changing.

# For example, lets say you want to grep your text files for trailing spaces,
# you could do so with the command 'grep -RI " $" .', but it might be nice to
# keep running that command and updating a terminal with fresh output while you
# eliminate the trailing spaces in another terminal. In that case, prepend
# "review" to the command to get 'review grep -RI " $" .'. The grep will run
# repeatedly you stop it, waiting a few seconds in between each run (this time
# will adjust automatically.

# TODO^16: rbenv version hack similar to what was done in bin/todo with DESIRED_PYTHON_VERSION, but beware of all the
# trouble that caused

require 'English' # needed for: $CHILD_STATUS.exitstatus

# TODO: would it be smart to have a cron job that runs 'pkill review' every day at ~7pm on my work laptop? Or should I
# instead strive to make the default behavior of this, and auto-dev, so reasonable that it's not required? Also, can I
# make this exit gracefully when pkill runs (possibly with -HUP)?

# TODO^4: avoid forcing the same version of ruby on programs that this may call (maybe be careful
# not to pass rbenv-related environment variables down)
# TODO^11: accept --minimum-delay or -m (e.g. auto-ci might want to call this with "-m 30")
# TODO^4: accept --maximum-delay or -M (e.g. auto-ci might want to call this with "-M $(( 60 * 60 * 6 ))")
# TODO^4: accept --interactive ("-i") or --non-interactive ("-n"), to determine whether to use backticks
#   TODO^4: DEBUG, if you call review with -i, it misinterprets it and fails forever, which is silly. We need to
#   make sure extra flags aren't ending up somewhere they shouldn't.
#   TODO^4: DEBUG: ...but, on the other hand, if you run 'review update-skiggety-utils --non-interactive',
#   update-skiggety-utils will never get the --non-interactive flag
# TODO^3: we need a control key to wake it up and make it refresh immediately (accept a
# control character or signal to refresh now)
# TODO: accept log file that logs output, changes, feequencies/counts, etc.
# TODO: ensure we never mess with the colors, test with "review git diff"

# TODO: use the 'rerun' or 'listen'  gem to watch the filesystem and restart progrom when there are changes? maybe with
# a different command line option?

class ReviewProgram

  def self.run
    new.run
  end

  def run
    # TODO^3: non-interactive by default, intereactive mode for when the
    # program might prompt you with something, and in that case backticks
    # cannot be used:
    # NOTE: this is an example of what NOT to do, because we need to distinguish between arguments that are meant for
    # this program, and arguments that are part of the command: $interactive = !ARGV.delete('--non-interactive')

    command = ARGV.map{ |a| "\"#{a}\"" }.join(' ')

    delay = 1

    system(command)
    exit_val = $CHILD_STATUS.exitstatus
    exit_date = `date`.chomp
    show_footer(command, exit_val, exit_date)

    output = ''
    while should_continue_looping(exit_val) && system("pretty_sleep -n #{delay}")
      last_output = output
      non_interactive_command = "#{command} 2>&1"
      output = `#{non_interactive_command}`
      exit_val = $CHILD_STATUS.exitstatus
      exit_date = `date`.chomp

      system('clear')
      puts output
      show_footer(command, exit_val, exit_date)

      change_detected = true
      change_detected = false if output == last_output
      delay = adjust_delay(delay, change_detected)
    end
  end

  # TODO^3: time how long the command takes and use that both to display and as ADD_TO_DELAY because
  # it sucks to run a long command constantly
  ADD_TO_DELAY = 1
  MULTIPLY_BY_DELAY = 1.10
  def adjust_delay(delay, change_detected)
    if change_detected
      1
    else
      (MULTIPLY_BY_DELAY * delay).floor + ADD_TO_DELAY
    end
  end

  # TODO: time the command, show how long it took
  #   TODO: factor that time into the delay increase. Something that ties up the cpu for a while should delay longer
  # TODO^3: colorize output, esp on failure
  def show_footer(command, exit_val, exit_date)
    system("echo_divider_with_text \"#\" \"'#{command}' exited with #{exit_val} at #{exit_date}\"")
  end

  def should_continue_looping(last_exit_val)
    if loop_condition == 'always' || loop_condition.nil?
      true
    elsif loop_condition == 'success'
      last_exit_val.zero?
    elsif loop_condition == 'fail'
      !last_exit_val.zero?
    end
  end

  def loop_condition
    @loop_condition ||= ENV['REVIEW_WHILE']
  end

end

ReviewProgram.run
