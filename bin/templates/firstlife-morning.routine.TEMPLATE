#!/usr/bin/env bash

# This script asks you to do things as a routine in the morning.

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1
. $SKIGGETY_UTILS_DIR/lib/firstlife.bash || exit_with_error 'could not use common firstlife code'

# TODO^32: this template script should be a laundry list of ideas
# - TODO^33: ..but first I should start using a local version
#   - TODO^34: ..but first I should simplify readability a lot

# TODO^2: use this to make sure we don't ask for the alarm too often: FIRSTLIFE_ALARM_MARKER_FILE="$FIRSTLIFE_DIR/markers/firstlife_outside_alarm_confirmed"

# TODO^12: figure out how to keep this stuff on a schedule:
# - TODO^100: help user set up crontab with a sample file
# - EASY TODO^42: build a timer into firstlife-delegate, keep stats on how long things take, just pairs of task names and times
#   - TODO^41: then make the logs daily, graph the daily linecount

# EASY TODO^10: firstlife-check-calendar could take a message string to override the normal one:
# TODO^68: (EASY) check calendar script should be the one to call 'firstlife-reward', at least if you called it with '--with-reward':
shellask "Your calendar is about to come up. When it does, mark your morning routine as starting now, OK?" \
    && firstlife-check-calendar --with-reward || accumulate_error 'did not check calendar'
exit_if_day_is_over

firstlife-delegate --with-reward 'Make coffee'
exit_if_day_is_over # TODO^114: (IN_PROGRESS, NOW) # ; exit_if_this_script_is_running_elsewhere # after we make sure common tasks only run once, we could do this, like what ../*firstlife-status scripts do with $FIRSTLIFE_DIR/.review-firstlife-status_PPID

# FUN TODO^115: (IN_PROGRESS, NOW) do something like this, and use widely, so you can shedule the morning routine multiple times as a backup: delegate_once_daily 'make sure you have taken any morning medications' || accumulate_error 'did not medicate'
firstlife-delegate --with-reward 'Make sure you have taken any morning medications' || accumulate_error 'did not medicate'

firstlife-break

exit_if_day_is_over # TODO^38: exit if another instance has taken over at the same time? (this would allow you to schedule the morning routine multiple times to be extra sure, but avoid it actually doubling up on all the tasks

# TODO^72: make sure this only gets asked perhaps once a week:
# TODO^21: mention and help with alarmy and cron:
# EASY TODO^86: help user start firstlife (including morning routine) with cron like I did, automate ensuring a line in local crontab, and use 'crontab-verbose'? (FUN) help user set up crontab like I did (use crontab-verbose?) (to help test on metrigon)
# TODO^91: move out of inner routine, and actually help user set up alarms and cron:
shellask 'Make sure you have a phone alarm that ensures you log into this laptop in time for your cron job to fire (for tomorrow). There is one called "Alarmy" that can require a matching photo to what "firstlife-wake" will present in the morning.' || accumulate_error 'BASIC AUTOMATION PROBLEM: alarm not set' # TODO^67: (EASY) use 'firstlife-delegate' instead
exit_if_day_is_over

# EASY TODO^84: Or better yet, manage the list of videos here and randomize:
SCOTTS_MEDITATION_PLAYLIST='https://www.youtube.com/playlist?list=PLbyyOcHfeHIqCKsHI62oWS6i4JQfdtcfd'
open "$SCOTTS_MEDITATION_PLAYLIST" 2>/dev/null &
firstlife-delegate --with-reward '5-minute meditation' || accumulate_error 'did not meditate' # TODO^82: --with-timer 330 (and use timers widely)
exit_if_day_is_over

firstlife-delegate --with-reward "Review any habits you working on breaking ('negative' habits in the tracker)" \
    || accumulate_error 'did not work on breaking habits'
exit_if_day_is_over

firstlife-delegate --with-reward 'Put away any temptations or distractions'
exit_if_day_is_over

firstlife-delegate --with-reward 'Make sure your phone is at least 25% charged (so you can walk outside with it soon)'
exit_if_day_is_over

firstlife-delegate 'Start up some podcasts'
exit_if_day_is_over

# TODO^3: firstlife-delegate --with-reward --with-timer $(( 30 * 60 )) 'blah blah':
firstlife-delegate --with-reward 'Put on exercise clothes (and make sure you have your housekey/earbuds, etc.)' \
    && firstlife-delegate --with-reward 'Exercise!' \
    || firstlife-delegate --with-reward 'Schedule exercise for later today' \
    || accumulate_error 'did not exercise'
exit_if_day_is_over

# TODO^2: maybe make a 'delegate' function that calls both firstlife-delegate --with-reward and exit_if_day_is_over:
firstlife-delegate --with-reward 'Hit the shower' || accumulate_error 'did not shower'
exit_if_day_is_over

firstlife-delegate --with-reward 'Finish morning habits' || accumulate_error 'did not finish morning habits' # TODO: list them out individually instead
exit_if_day_is_over

firstlife-delegate --with-reward 'Make your bed' || accumulate_error 'did not make your bed'
exit_if_day_is_over

firstlife-delegate --with-reward 'Get dressed' || accumulate_error 'did not get dressed'
exit_if_day_is_over

firstlife-delegate --with-reward 'Break your fast' || accumulate_error 'skipped breakfast'
exit_if_day_is_over

firstlife-delegate 'Keep the tunes pumping (you can use "firstlife-music")'
exit_if_day_is_over

exit_with_any_accumulated_errors

# TODO^12: make exit_if_day_is_over aware of errors?

# EASY TODO^2: firstlife-check-calendar could take a message string to override the normal one:
# TODO^68: (EASY) check calendar script should be the one to call 'firstlife-reward', at least if you called it with '--with-reward':
shellask "Your calendar is about to come up. When it does, mark how long your morning routine took, and plan your day, OK?" \
    && firstlife-check-calendar --with-reward || accumulate_error 'did not check calendar'

# TODO: do I want this here? do I want it in other high-level firstlife scripts?:
echo "$(basename $0) succeeded!"
firstlife-reward $(basename $0)

exit 0
