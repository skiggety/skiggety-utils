#!/usr/bin/env bash

# Use this script as a basis for your personal multitasking routine, uncommenting what's useful without making it too
# complicated. This is a very loose example, feel free to rearrange and comment/uncomment stuff, usually a paragraph at
# a time.

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1
. $SKIGGETY_UTILS_DIR/lib/firstlife.bash || exit_with_error 'could not use common firstlife code'
. $SKIGGETY_UTILS_DIR/lib/today_todo.bash || exit_with_error 'could not include today_todo.bash'
. $SKIGGETY_UTILS_DIR/lib/vital.bash || exit_with_error 'could not include vital.bash'

passes_at_todo_list=1
FIRSTLIFE_MULTITASKING_COUNT=${FIRSTLIFE_MULTITASKING_COUNT:-4} # TODO: make this overridable in firstlife config template

export today_todo_now_max_count="$FIRSTLIFE_MULTITASKING_COUNT"

####################################################################################################

# EASY TODO^91: inside this script and elsewhere, use 'firstlife-delegate --with-reward' instead of calling 'shellask' directly:

# TODO^81: firstlife should keep an eye on "MAINTENANCE" tag in vital/today_todo

exit_if_day_is_over

firstlife-delegate --with-reward 'Make sure various devices including this one are charged/charging' \
    || accumulate_error 'should have charged your devices' # TODO: don't ask more than once every 3 hours
exit_if_day_is_over

# EASY TODO^91: (IN_PROGRESS, NOW) Use firstlife-delegate --with-reward, or failing that, use firstlife-reward with description argument(s)
shellask 'put a few things away' && firstlife-reward || accumulate_error 'did not put things away'
exit_if_day_is_over

shellask 'put away any temptations or distractions' && firstlife-reward || accumulate_error 'did not clear distractions'
firstlife-delegate 'keep the tunes pumping (you can use "firstlife-music")' || accumulate_error 'did not DJ for yourself'
exit_if_day_is_over

shellask 'do one act of self care or something on the habit tracker' && firstlife-reward || accumulate_error 'missed a habit'
exit_if_day_is_over

firstlife-break -t 120

#### Today's Todo List #############################################################################
# EASY TODO^85: maybe the inside of the loop could be more like merely:
# EASY TODO^85:     today_todo
# EASY TODO^85:     # shellask 'work on your one of your top 3 todos and downvote it if appropriate'
# EASY TODO^85:     vital --iterate -n $FIRSTLIFE_MULTITASKING_COUNT
#### Today's Todo List #############################################################################
for num in $(seq $passes_at_todo_list); do

    shellask 'Handle 1 important item from from any paper lists (if any), possibly by putting it into today_todo' && firstlife-reward || accumulate_error 'ignored paper todo list'
    exit_if_day_is_over

    # TODO^14: only do this if you haven't yet cleared them all today yet:
    open 'https://www.google.com/calendar/render' # EASY TODO^87: script extract
    shellask 'Take care of a calendar task, maybe by putting it into today_todo' && firstlife-reward || accumulate_error 'ignored paper todo list'
    exit_if_day_is_over

    vital-list-by-tag POINT
    shellask 'Run "vital" again to tag or upvote something worth productivity POINTS' || \
        accumulate_error 'did not get focus on the important stuff'
    exit_if_day_is_over

    vital-list-by-tag CONFIRMING
    firstlife-delegate --with-reward 'Mark something DONE that is "CONFIRMING" in today_todo (if you can)' || accumulate_error 'Did not confirm anything'
    exit_if_day_is_over

    today_todo -n | grep --color=always '\(NOW\|LATER\|--------\|^$\)' # EASY TODO^84: EXTRACT, and REUSE
    firstlife-delegate --with-reward 'See if you can work on something "NOW" that is marked "LATER" (or vise-versa) in today_todo' || accumulate_error 'Did not maintain NOW and LATER tags'
    exit_if_day_is_over

    today_todo --non-interactive
    shellask 'Run "vital" once or twice to make sure you are ready to focus on the right stuff' || \
        accumulate_error 'did not get tasks organized'
    exit_if_day_is_over

    firstlife-check-calendar || accumulate_error 'did not check calendar'
    exit_if_day_is_over

    # TODO^88: extract this bit that works on a few todos to firstlife-work-on-top-n-todos -n $MULTITASKING_CONSTANT
    # - TODO^90: or better yet, EXTRACT to 'firstlife-iterate-on-vital'
    pushd $VITAL_DIR > /dev/null
    todos="$($SKIGGETY_UTILS_DIR/bin/todo|grep '\(NOW\|EASY\)'|tail -n $FIRSTLIFE_MULTITASKING_COUNT|tac)" # lump "EASY" in with "NOW", might as well do easy stuff right away
    ORIGINAL_IFS="$IFS"
    IFS=$'\n'
    read -rd '' -a todos_as_array <<<"$todos"
    debug_here "echo \${todos_as_array} contains"
    for todo_line in ${todos_as_array[@]};do
        shellask "Work on this task (and downvote or mark done using today_todo):${newline}${todo_line}" && \
            firstlife-reward || \
            accumulate_error "Didn't work on todo: $todo_line"
        exit_if_day_is_over

        # EASY TODO^75: loop through known tags:
        # EASY TODO^89: something like this needs to happen actually before you do the task:
        if echo $todo_line | grep ERRAND >/dev/null; then
            today_todo -n | grep ERRAND
            firstlife-delegate --with-reward "Maybe handle some other errands"
        fi
        if echo $todo_line | grep PURCHASE >/dev/null; then
            today_todo -n | grep PURCHASE
            firstlife-delegate --with-reward "Maybe handle some other purchases"
        fi
        exit_if_day_is_over

        firstlife-break -t 180

        exit_if_day_is_over
    done
    IFS="$ORIGINAL_IFS"
    popd > /dev/null

    shellask 'Do one act of self care or something on the habit tracker' && firstlife-reward || accumulate_error 'missed a habit'
    exit_if_day_is_over

    firstlife-check-calendar || accumulate_error 'did not check calendar'
    exit_if_day_is_over

    firstlife-check-email --with-reward || accumulate_error 'ignored email'
    exit_if_day_is_over

    firstlife-break
    exit_if_day_is_over

    shellask 'Do one act of self care or something on the habit tracker' && firstlife-reward || accumulate_error 'missed a habit'
    exit_if_day_is_over

    # TODO^86: if you have not finished all dishes at least once today
    firstlife-delegate --with-reward 'Put away at least 2 dry dishes (if needed)' || accumulate_error 'Did not put away dishes'
    exit_if_day_is_over

    firstlife-delegate --with-reward 'Wash at least 1 dish' || accumulate_error 'Did not wash a dish'
    exit_if_day_is_over

    firstlife-check-email --with-reward || accumulate_error 'ignored email'
    exit_if_day_is_over

done

################################################################################

shellask 'put a few things away' && firstlife-reward || accumulate_error 'did not put things away'
exit_if_day_is_over

shellask "Catch up on communicating with people" && firstlife-reward || accumulate_error "Did not communicate"
exit_if_day_is_over

pushd $SKIGGETY_UTILS_DIR
git add -p
shellask "Commit some code" && firstlife-reward || accumulate_error "Did not commit"
popd
exit_if_day_is_over

shellask "Close a 2-4 browser tabs unless they are reasonable already" && firstlife-reward || accumulate_error "Did not clean up browser tabs"
exit_if_day_is_over

shellask 'Put a few things away' && firstlife-reward || accumulate_error 'did not put things away'
exit_if_day_is_over


firstlife-break
exit_if_day_is_over

today_todo -n | grep --color=always '\(FUN\|EASY\|--------\|^$\)'
firstlife-delegate --with-reward "Work on something FUN/EASY (is enough stuff tagged? --run \"today_todo -n | grep '\\(FUN\\|EASY\\)'\")"

# call firstlife-morning again just in case it hasn't been done, since it only needs to be done once:
firstlife-morning || accumulate_error 'morning routine had errors'
exit_if_day_is_over

exit_with_any_accumulated_errors
