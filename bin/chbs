#!/usr/bin/env ruby
# frozen_string_literal: true

# Named for "correct horse battery staple" because of "Password Strength" aka 'xkcd.com/936/', this program generates
# secure-enough passwords, optimized for being memorized by humans

# NOTE: If you like reading code top-down as I do, start reading outside the class at the end of the script, which will
# quickly bring you back to CHBS#initialize and CHBS#report just a little ways below here.

require 'securerandom'

# TODO: this is interesting:
# https://www.schneier.com/blog/archives/2014/03/choosing_secure_1.html#c4820917
# . You could make a feature that will tell you your website passphrase given
# your master passphrase.

# TODO: see what you can learn from the Wikipedia article on Diceware

# TODO: consider a --dense (a.k.a. --troubador a.k.a. -d) mode to generate secure passwords in the traditional style
# that doesn't need to be as long but is harder to remember.

class CHBS

  # TODO TODO: accept and pass through options for min/max words/characters/characters-per-word, plus whether it should
  # jamn in extras for compliance
  # TODO TODO TODO:  and pass through options for min/max word length (--mwl/--Mwl)
  # TODO: RENAME this method and bring it up to speed so it's a usefully concise way of printing the whole report
  def self.generate_passphrase
    generator = CHBS.new
    generator.generate
  end

  def self.available_words
    # TODO: # consider (optionally? If there's an internet connection) using the
    # TODO: # EFF word list:
    # TODO: # https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt
    @available_words ||= read_dictionary_words_from_traditional_location
  end

  def self.read_dictionary_words_from_traditional_location
    result = []
    File.open('/usr/share/dict/words') do |file|
      file.each do |line|
        result << line.strip
      end
    end
    result
  end

  def initialize(max_word_length: 8, min_word_length: 4)
    @max_word_length = max_word_length
    @min_word_length = min_word_length
  end

  def report
    lines = []

    message = "Generating passphrases from #{count_available_words} available words (for now you have to edit this " \
              'program to tweak this):'
    lines << message
    lines << message.gsub(/./, '-')

    passphrase_count.times{ lines << generate }

    entropy_report = "Entropy is >= #{entropy_bitcount.floor} bits, from your choice of #{passphrase_count} "\
                     "passphrases with #{entropy_bitcount_per_passphrase.round(2)} bits each."
    lines << entropy_report.gsub(/./, '-')
    lines << entropy_report

    lines.join("\n")
  end

  def generate
    selected_words = []
    wordcount.times do
      selected_words << random_word
    end
    selected_words.join(' ')
  end

  def count_available_words
    available_words.length
  end

  def entropy_bitcount
    entropy_bitcount_per_passphrase - lost_entropy_when_user_inevitably_picks_the_weakest_passphrase_shown
  end

  def entropy_bitcount_per_passphrase
    Math.log(possibilities_count, 2)
  end

  def lost_entropy_when_user_inevitably_picks_the_weakest_passphrase_shown
    Math.log(passphrase_count, 2)
  end

  private def wordcount
    4 # TODO: UN-HARDCODE
  end

  private def passphrase_count
    21 # TODO: UN-HARDCODE
  end

  private def possibilities_count
    count_available_words**wordcount
  end

  private def random_word
    result = nil
    # TODO: do this better. Even thought the average case is OK, the worst case is horrible. Or has this already been
    # filtered? I need to get some unit tests in here::
    result = random_element(available_words) until valid_word?(result)
    result
  end

  private def available_words
    @available_words ||= self.class.available_words.select{ |w| valid_word?(w) }
  end

  private def valid_word?(word)
    return false if word.nil?

    word.length >= @min_word_length && word.length <= @max_word_length && !too_proper?(word)
  end

  # filter out proper nouns (capitalized words)
  private def too_proper?(word)
    # TODO: make this optional
    !!/[[:upper:]]/.match(word[0])
  end

end

def choose(ubound)
  SecureRandom.random_number(ubound)
end

def random_element(array)
  array[choose(array.length)]
end

generator = CHBS.new(max_word_length: 7)
puts generator.report
