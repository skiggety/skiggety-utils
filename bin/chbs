#!/usr/bin/env ruby
# frozen_string_literal: true

# Named for "correct horse battery staple" because of "Password Strength" aka 'xkcd.com/936/', this program generates
# secure-enough passwords, optimized for being memorized by humans

# NOTE: If you like reading code top-down as I do, start reading outside the class at the end of the script, which will
# quickly bring you back to CHBS#initialize and CHBS#report just a little ways below here.

require 'securerandom'

# In this article https://www.schneier.com/blog/archives/2014/03/choosing_secure_1.html#c4820917 , Bruce Schneier seems
# to be criticizing correct-horse-battery-staple style passwords but I read it as saying the real problem is tha they
# are not random because humans are choosing to come up with arbitrary words out of their own head instead, which is
# exactly the problem this program addresses.

# TODO: see what you can learn from the Wikipedia article on Diceware

# TODO: consider a --dense (a.k.a. --troubador a.k.a. -d) mode to generate secure passwords in the traditional style
# that doesn't need to be as long but is harder to remember.

# TODO: maybe accept a flag that makes this print one and only one passphrase, with no other output. It could be used by
# other programs.

class CHBS

  # TODO^2: accept and pass through options for min/max words/characters/characters-per-word, plus whether it should
  # jam in extras for compliance
  # TODO^3:  and pass through options for min/max word length (--mwl/--Mwl)

  def self.all_available_words
    # TODO: # consider (optionally? If there's an internet connection) using the
    # TODO: # EFF word list:
    # TODO: # https://www.eff.org/files/2016/07/18/eff_large_wordlist.txt
    @all_available_words ||= read_dictionary_words_from_traditional_location
  end

  def self.read_dictionary_words_from_traditional_location
    result = []
    File.open('/usr/share/dict/words') do |file|
      file.each do |line|
        result << line.strip
      end
    end
    result
  end

  def initialize(max_word_length: 8, min_word_length: 4)
    @max_word_length = max_word_length
    @min_word_length = min_word_length
  end

  def report
    lines = []

    intro_message = "Generating passphrases from #{words.length} words" \
                    ' (for now you have to edit this program to tweak this):'
    lines << intro_message
    lines << divider_same_length_as(intro_message)

    passphrase_count.times{ lines << generate_passphrase }

    lines << divider_same_length_as(entropy_report)
    lines << entropy_report

    lines.join("\n")
  end

  def entropy_report
    "Entropy is >= #{entropy_bitcount.floor} bits, from your choice of #{passphrase_count} passphrases "\
      "with #{entropy_bitcount_per_passphrase.round(2)} bits each."
  end

  def divider_same_length_as(text)
    text.gsub(/./, '-')
  end

  def generate_passphrase
    selected_words = []
    wordcount.times do
      selected_words << random_element(words)
    end
    selected_words.join(' ')
  end

  def entropy_bitcount
    entropy_bitcount_per_passphrase - lost_entropy_when_user_inevitably_picks_the_weakest_passphrase_shown
  end

  def entropy_bitcount_per_passphrase
    Math.log(possible_passphrase_count, 2)
  end

  def lost_entropy_when_user_inevitably_picks_the_weakest_passphrase_shown
    Math.log(passphrase_count, 2)
  end

  private def wordcount
    4 # TODO: UN-HARDCODE
  end

  private def passphrase_count
    21 # TODO: UN-HARDCODE
  end

  private def possible_passphrase_count
    words.length**wordcount
  end

  private def words
    @words ||= self.class.all_available_words.select{ |w| valid_word?(w) }
  end

  private def valid_word?(word)
    return false if word.nil?

    word.length >= @min_word_length && word.length <= @max_word_length && !too_proper?(word)
  end

  # filter out proper nouns (capitalized words)
  private def too_proper?(word)
    # TODO: make this optional
    /[[:upper:]]/.match(word[0])
  rescue ArgumentError
    true
  end

end

def choose(ubound)
  SecureRandom.random_number(ubound)
end

def random_element(array)
  array[choose(array.length)]
end

generator = CHBS.new(max_word_length: 7)
puts generator.report
