#!/usr/bin/env python3
"""Demonstrates a hack, that may not even be a good idea, that allows a python script to
self-determine its version using pyenv."""

# TODO^17: DELETE many, but not all of the debug messages once "CFPVOM" bug is solved.

# Because the CURRENT directory should not determine the python version:
# TODO: THIS SHOULD NOT BE NECESSARY! WHY? OH, WHY?!?! (maybe learn more about pyenv and how python
# scripts are normally packaged):
import os
import platform
import sys
DESIRED_PYTHON_VERSION = '3.11.1'
print(f"DEBUG: ----------------------------------------")
print(f"DEBUG: sys.argv[0] is {sys.argv[0]}")
print(f"DEBUG: before touching version, os.environ.get('PYENV_VERSION') is {os.environ.get('PYENV_VERSION')}")
print('TODO^38: make sure this is false on the first run:')
print(f"DEBUG: before touching version, os.environ.get('PYENV_VERSION_HACKED') is {os.environ.get('PYENV_VERSION_HACKED')}")
print(f'TODO^49: DEBUG: did I fix CFPVOM? I think so, so clean up:')
print(f"DEBUG: before touching version, os.environ.get('PYENV_VERSION_HACK_DEPTH') is {os.environ.get('PYENV_VERSION_HACK_DEPTH')}")
print('...well, no wonder it works on eelwright...this is not a good test, apparently')

# TODO^34: maybe it has something to to with PWD WHEN YOU START THE SHELL or WINDOW

# TODO^36: uh-oh, the log comes out different depending on whether you run it on its own or as
# part of auto-dev, specifically, whether PYENV_VERSION_HACKED is already true (it should always be
# false at the beginning of the first run.

print(f"DEBUG: before touching version, platform.python_version() is {platform.python_version()}")

print('DEBUG: the contents os $PATH breaks down to:')
path_as_array = os.environ.get('PATH').split(':')
for path_element in path_as_array:
    print(f"    {path_element}")

if DESIRED_PYTHON_VERSION != platform.python_version():

    # TODO^39: make this a measure of loop depth instead of a bool. then you can kill it every
    # multiple of n:

    # limit recursion depth:
    os.environ['PYENV_VERSION_HACK_DEPTH'] = os.environ.get('PYENV_VERSION_HACK_DEPTH') or str(1)
    print(f"TODO^47: DEBUG: after ||= 1, os.environ.get('PYENV_VERSION_HACK_DEPTH') is {os.environ.get('PYENV_VERSION_HACK_DEPTH')}")

    print(f"DEBUG: before modulo check, os.environ.get('PYENV_VERSION_HACK_DEPTH') is {os.environ.get('PYENV_VERSION_HACK_DEPTH')}")
    print(f"DEBUG: before modulo check, int(os.environ.get('PYENV_VERSION_HACK_DEPTH') or 1) is {int(os.environ.get('PYENV_VERSION_HACK_DEPTH') or 1)}")
    # This is hacky, but, if it works, whatever:
    if int(os.environ.get('PYENV_VERSION_HACK_DEPTH') or 1) % 5 == 5: # avoid infinite loop
        raise Exception(f"Failed to force python version to {DESIRED_PYTHON_VERSION}. " \
                        "This script needs debugging.")
    print(f"DEBUG: OK, attempting to switch from python version {platform.python_version()} to {DESIRED_PYTHON_VERSION}")
    print('setting PYENV_VERSION in env...')
    os.environ['PYENV_VERSION'] = DESIRED_PYTHON_VERSION
    print('setting PYENV_VERSION_HACKED in env...')
    os.environ['PYENV_VERSION_HACKED'] = 'true'
    os.environ['PYENV_VERSION_HACK_DEPTH'] = str(int(os.environ['PYENV_VERSION_HACK_DEPTH']) + 1)
    print(f"DEBUG: after increment, os.environ.get('PYENV_VERSION_HACK_DEPTH') is {os.environ.get('PYENV_VERSION_HACK_DEPTH')}")
    print(f"DEBUG: os.environ.get('HOME') is {os.environ.get('HOME')}")
    home_dir = os.environ.get('HOME')

    # ugh, stack new shims on the path in case a parent process has already used pyenv to
    # stack on a specific python version's bin path:
    print(f"DEBUG adding to front of path: {home_dir}/.pyenv/shims:{home_dir}/.pyenv/bin")
    os.environ['PATH'] = f"{home_dir}/.pyenv/shims:{home_dir}/.pyenv/bin:{os.environ['PATH']}"

    print(f"DEBUG: after setting version, os.environ.get('PYENV_VERSION') is {os.environ.get('PYENV_VERSION')}")
    os.execvpe(sys.argv[0], sys.argv, os.environ) # system exec self

print(f"DEBUG: SUCCESS! (this is after version hack) If you cd to a different dir, will it still work?")
os.environ['PYENV_VERSION_HACKED'] = 'false'
