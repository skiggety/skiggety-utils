#!/usr/bin/env python3
"""show TODO's in code (unless they say IGNORE_TODO on the same line, like this), sorted by votes"""

# TODO^5: break out the next version into it's own project/repo
#   TODO^7: RENAME this (with Kevin), or at least the next version, to something a bit more unique
#   so it can stand as its own project.

# In skiggety-utils, this program basically takes the place of a bug tracking system. It's a
# good-enough solution, since I am my own client. I just vote when stuff bothers me, this program
# shows me what is worth spending time on.

import os
import platform
import sys
import argparse
import stat
import re # regular expressions

from colorama import Fore, Style

sys.path.append(os.path.abspath(os.path.join(os.getenv('SKIGGETY_UTILS_DIR'),"lib")))
#pylint: disable=C0413 # because this has to go after we mess with sys.path
from todo_line import TodoLine
#pylint: enable=C0413

# TODO: consider supporting an alternate format for votes, something that rubocop won't complain
# about

# TODO^3: accept piped-in grep output for sorting, like grep does

# TODO^2: maybe accept --vote 'substring', --downvote 'substring', or --delete 'substring'  to find
# a matching todo and change the vote count without doing anything else
#  TODO^3: in particular '--vote' would be a timesaver, especially if you could use it with today_todo
#  TODO: once we have a --delete option, you could write a script that goes through your todo's in
#  priority order, and prompts you to do each one with shellask, and deletes them if you say you
#  have done it.

# TODO: It would be interesting to have a way to show a histogram of todos by votes.

# TODO: maybe todo should suggest -f option when you are using -w mode with manual confirmation for
# each file.

PROGRAM_DESCRIPTION = 'finds TODOs, sorted by votes' # IGNORE_TODO

def main():
    """Find and display todo entries, according to options passed in."""

    # TODO: use argparse built-in way of setting defaaults instead:
    ignore_keyword = None

    arg_parser = argparse.ArgumentParser(description = PROGRAM_DESCRIPTION)
    arg_parser.add_argument('-k', '--keyword',
            help = 'Select a keyword. Defaults to \'TODO\'.') # IGNORE_TODO

    # TODO: consider different single-letter extension, since -i is often used to mean
    # case-insensitive:
    # TODO: add_argument('-i', '--ignore-keyword', help = 'TODO')

    # TODO^3: how about an argument/mode for the linter that complains about non-compacted todo
    # syntax, instead of writing or printing the normal report.

    # TODO: maybe todo should suggest running todo -w when it notices simplifications it could be
    # making.

    # TODO: what's the one-character version of the '--non-interactive' flag?:
    arg_parser.add_argument('--non-interactive', action='store_true', help = 'TODO')
    arg_parser.add_argument('-w', '--write', action='store_true', help = 'TODO')
    arg_parser.add_argument('-f', '--force', action='store_true', help = 'TODO')
    arg_parser.add_argument('-d', '--debug', action='store_true', help = 'TODO')
    arg_parser.add_argument('-q', '--quiet', action='store_true', help = 'TODO')
    # TODO: have a way to also show a graph that helps you understand how many votes you have across
    # how many todos

    arg_parser.add_argument('--color', action='store', choices=['never', 'auto', 'always'],  help = 'TODO')

    arg_parser.add_argument('--exclude-dir', help = 'Directories to exclude.', action = 'append')
    arg_parser.add_argument('--exclude', help = 'Files to exclude.', action = 'append')

    command_line_args = arg_parser.parse_args()

    # above here, you just gotta print:
    global SHOULD_DEBUG
    SHOULD_DEBUG = command_line_args.debug
    print_debug('We are in debug mode (if you are seeing this message).')

    # set up condtions from command line arguments:

    exclude_dirs = command_line_args.exclude_dir or []
    # TODO: clean up exclude dirs so you can pass './todo_report/' and it still means 'todo_report'
    exclude_files = command_line_args.exclude or []
    exclude_files = [re.sub(r'^\.\/', '', i) for i in exclude_files]

    keyword = command_line_args.keyword or 'TODO' # because you can use other keywords # IGNORE_TODO
    # TODO: use argparse built-in way of setting defaaults instead:
    ignore_keyword = ignore_keyword or f'IGNORE_{keyword}'
    # TODO: validate that the keywords can only be letters, underscores, and some basic stuff
    should_write = command_line_args.write
    should_force = command_line_args.force
    quiet_mode = command_line_args.quiet
    print_debug(f"command_line_args.color is {command_line_args.color}")
    match command_line_args.color:
        case 'always':
            print_debug('setting: color_mode = true')
            color_mode = True
        case 'never':
            print_debug('setting: color_mode = false')
            color_mode = False
        case _:
            print_debug('setting: color_mode = sys.stdout.isatty()')
            color_mode = sys.stdout.isatty()

    global interactive # TODO: eliminate globals
    interactive = True # TODO^4: detect if output is to a terminal
    if command_line_args.non_interactive:
        interactive = False

    lines = []

    # TODO^2: parallelization might make this a lot faster (learn from rg)
    # TODO: refactor, too much nesting:
    for root, dirs, file_paths in os.walk('.', topdown=True):
        dirs[:] = [d for d in dirs if d not in exclude_dirs]
        for file_path in file_paths:
            full_file_path = os.path.join(root, file_path)
            if re.sub(r'^\.\/', '', full_file_path) in exclude_files:
                print_debug(f"EXCLUDING FILE: {full_file_path}")
                continue
            if (stat.S_ISBLK(os.stat(full_file_path).st_mode) or
                stat.S_ISSOCK(os.stat(full_file_path).st_mode) ): # skip devices
                continue
            lines.extend(lines_from_file(full_file_path, keyword, ignore_keyword))

    lines = sorted(lines, key = lambda l: (l.votecount, l.file_path, l.line_number))

    # TODO: method extract:
    if should_write:
        print_debug('Ok, we should be writing changes to disk...')
        print_debug(f"should_force = {should_force}")
        print_debug(f"interactive = {interactive}")
        if (should_force or interactive):
            writecount = 0
            print_debug('Writing changes to disk...')
            for line in reversed(lines): # start with the highest-voted ones
                if line.has_changes_to_write():
                    print_debug('There are changes to write for line: \'' + str(line) + '\'')
                    if (should_force or (interactive and ask_user_to_confirm_this_line_write(line))):
                        # TODO^4: write more efficiently (all changes from one file at once):
                        line.write()
                        writecount += 1
            print(f"{os.path.basename(sys.argv[0])} compacted {writecount} {keyword}'s")
        else:
            raise Exception('Cannot write changes in non-interactive mode without the -f or ' \
                            '--force flag')

    if quiet_mode:
        print_debug('skipping the report since we are in quiet mode')
    else:
        if color_mode:
            find_todo_entry_pattern = re.compile(rf"(?P<todo_entry>({keyword}(\^\d+)?)( {keyword}(\^\d+)?)*)")
            line_color = Style.RESET_ALL
            def highlight_todo_entry(matchobj): # TODO: can I move this method?:
                return (Style.BRIGHT + Fore.RED + matchobj.group('todo_entry') +
                    Style.RESET_ALL + line_color)
            for line in lines[:-1]:
                print(re.sub(find_todo_entry_pattern, highlight_todo_entry, str(line)))
                # TODO^3: the yellow line should really be everything that's tied for highest votes,
                # so something like:
                # if line.votecount = max_votecout
                #     print_highlighted_colorful_line(line)
                # else
                #     print_colorful_line
            line_color = Style.BRIGHT + Fore.YELLOW
            print_debug(f"we have {len(lines)} lines")
            if len(lines) > 0:
                print(line_color +
                        re.sub(find_todo_entry_pattern, highlight_todo_entry, str(lines[-1])) +
                        Style.RESET_ALL)
        else:
            for line in lines:
                print(str(line))

    # TODO^4: print summary with TODO count, maybe a vote count

# TODO^3: RENAME, remove, move to a new library, or use an existing library?
def print_debug(debug_message):
    """basic debug output"""
    if SHOULD_DEBUG:
        # TODO: if you want, you could tie this into python's logging framework and do it that way
        sys.stderr.write(Fore.CYAN + debug_message + Style.RESET_ALL + '\n')

def ask_user_to_confirm_this_line_write(line):
    """ask the user about individual lines to replace. Might be overkill, fine for now"""
    message = f"Would you like to replace this line:\n{line.original_text}\n" \
            f" ...with this line:\n{line.text}\n" \
            f" ...at this location?:\n{line.file_path}:{str(line.line_number)}\n"
    return ask_user_yn(message)

def ask_user_yn(question_text):
    """prompt the user with any yes or no question and return as a boolean"""
    if not interactive:
        raise Exception('cannot ask user questions in non-interactive mode')
    full_question = question_text + ' [y/n]:'
    sys.stdout.write(full_question)
    answer = input()
    print_debug('answer is \'' + answer + '\'')
    if answer.lower() in ["y","yes"]:
        print_debug('...which means \'yes\'.')
        return True
    print_debug('...which means \'no\'.')
    return False

def lines_from_file(full_file_path, keyword, ignore_keyword):
    """given a file, collect relevant TodoLine's in lines"""

    lines_found = []

    # TODO^2: it is inefficient to re-create these every time, so make them an instance
    # variable:, once this is all in a class
    keyword_regex        = re.compile(keyword)
    ignore_keyword_regex = re.compile(ignore_keyword)

    # what happens with files of different encodings?
    #   TODO: make sure it works with files of different encodings
    #   TODO^2: shut up pylint (it wants me to specify an encoding)
    with open(full_file_path) as file:
        line_number = 0
        try:
            for line in file:
                line = line.rstrip('\n')
                line_number += 1
                if keyword_regex.search(line):
                    if not ignore_keyword_regex.search(line):
                        lines_found.append(TodoLine(keyword, full_file_path, line_number, line))
        except UnicodeDecodeError: # skip binary files
            pass
    return lines_found

# TODO: flags:

  # TODO^4: todo should accept a path ( to a file or directory) to use in place of "." for grep.
  # This way you could run "todo bin/todo" and see the TODO^2's in this file cleanly without the
  # ingorable lines.

  # TODO^2: non-interactive [read-only] mode should be the default when this is called from a script
  # (output is not a tty)

  # TODO: add a command line option to specify a minimum number of votes, so if you pass
  # "--minimum-votes 3", "EXAMPLE_KEYWORD EXAMPLE_KEYWORD EXAMPLE_KEYWORD" or EXAMPLE_KEYWORD^3 will
  # show up, but not "EXAMPLE_KEYWORD EXAMPLE_KEYWORD"

# TODO: consider spinning this project off, with a not-so-clever name like "tood" or something

main()
