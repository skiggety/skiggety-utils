#!/usr/bin/env python3.9

program_description = 'finds TODOs, sorted by votes'

import sys
import os

if sys.version_info[0] < 3:
    raise Exception('Must be using Python 3')

sys.path.append(os.path.abspath(os.path.join(os.getenv('SKIGGETY_UTILS_DIR'),"lib")))

import subprocess
import argparse

from todo_line import *

# TODO TODO TODO: use pylint

def main():

    # TODO: use argparse built-in way of setting defaaults instead:
    ignore_keyword = None

    arg_parser = argparse.ArgumentParser(description = program_description)
    arg_parser.add_argument('-k', '--keyword', help = 'select a keyword. Defaults to \'TODO\'.') # IGNORE_TODO
    # TODO: add_argument('-i', '--ignore-keyword', help = 'TODO')
    command_line_args = arg_parser.parse_args()

    keyword = command_line_args.keyword or 'TODO' # because you can use other keywords # IGNORE_TODO
    # TODO: use argparse built-in way of setting defaaults instead:
    ignore_keyword = ignore_keyword or f'IGNORE_{keyword}'
    # TODO: validate that the keywords can only be letters, underscores, and some basic stuff

    # TODO: stop relying on grep at some point, to avoid getting confused by filenames with colons and numbers in them, etc.:
    grep_output = subprocess.run(['grep', '-RnI', '-D', 'skip', keyword, '.'], check=False, text=True, capture_output=True).stdout # IGNORE_TODO

    todo_lines = []
    for line in grep_output.splitlines():
        todo_line = False
        try:
            todo_line = TodoLine(keyword, ignore_keyword, *split_grep_output(line))
        except Exception:
            pass
        if (todo_line):
            todo_lines.append(todo_line)

    todo_lines = sorted(todo_lines, key = lambda l: (l.votecount, l.file_path, l.line_number))

    for todo_line in todo_lines:
            print(str(todo_line))

    # TODO: print summary with TODO count, maybe a vote count

def split_grep_output(grep_output_line):
    match = re.search(r'^(.*?):(\d*):(.*)$', grep_output_line)

    if not match:
        raise Exception("Can't create a TodoLine from this--TODO: change this to avoid using this exception for control flow")

    return match.group(1), match.group(2), match.group(3)

# TODO: flags:
  # TODO TODO: highlighting on or off. It should be on by default unless output is piped to a file, like with grep and "--color" (or "--colour" )
    # TODO TODO: highlight TODO's
  # TODO: rewrite changes back to files or not. Off by default.
    # TODO TODO: there should also be a "force" mode with a "-f/--force" flag that can do the replacements without asking
  # TODO TODO: todo should accept a path ( to a file or directory) to use in place of "." for grep. This way you could run "todo bin/todo" and see the TODO's in this file cleanly without the ingorable lines.
  # TODO: non-interactive [read-only] mode should be the default when this is called from a script (output is not a tty)
  # TODO: add a command line option to specify a minimum number of votes, so if you pass "--minimum-votes 3", "EXAMPLE_KEYWORD EXAMPLE_KEYWORD EXAMPLE_KEYWORD" or EXAMPLE_KEYWORD^3 will show up, but not "EXAMPLE_KEYWORD EXAMPLE_KEYWORD"
# TODO: consider spinning this project off, with a not-so-clever name like "tood" or something

  # TODO TODO TODO: when called from a terminal, this program should interactively check with the user if they want to do replacements like "TODO TODO"-->"TODO^2" before displaying sorted output
  # TODO: avoid scanning large non-text files:

main()
