#!/usr/bin/env bash

# The purpose of this script is to limit the length of output of something, so you could pipe something through this
# script and it would just pass it through if it's not too long, or print an explanation of how many lines were omitted
# and run tail otherwise.  TODO^4: # Maybe could RENAME it to 'tailmax', 'tail-verbose', or something?

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

DIVIDER=false
PROMPT_LINES='3' # TODO: better implementation, not sure how to get $PS1 from parent process
# TODO: if it's not in a terminal, maybe default to using AUTO_SCALE:
MAX_SCREEN_LINES="$(( $(tput lines) - $PROMPT_LINES ))" # default to a screenful, allowing room for prompt
MAX_LINES="$(( $MAX_SCREEN_LINES - 1 ))" # because the explanation takes up 1 line
AUTO_SCALE=false
AUTO_SCALE_MIN_LINES="4"
while [[ "$1" == -* ]]; do
    if [ "$1" == '-a' -o "$1" == '--auto' -o "$1" == '--auto-scale' ]; then
        AUTO_SCALE=true
        shift
    elif [ "$1" == '--auto-min-scale' ]; then
        AUTO_SCALE=true
        shift
        AUTO_SCALE_MIN_LINES="$1"
        shift
    elif [ "$1" == '-l' ]; then
        shift
        MAX_LINES="$(( $1 - 1 ))" # because the explanation takes up 1 line
        AUTO_SCALE=false
        shift
    elif [ "$1" == '-n' ]; then
        shift
        MAX_LINES="$1"
        AUTO_SCALE=false
        shift
    # TODO: elif [ "$1" == '--headlines' ]; then # show a few lines with "head" at the top, still use the right total amount of space on screen
    elif [ "$1" == '-t' -o "$1" == '--title' ]; then
        shift
        TITLE="$1"
        shift
    elif [ "$1" == '-d' -o "$1" == '--divider' ]; then
        DIVIDER=true
        shift
    fi
    # TODO: help option should explain that -n tells it how many lines of screen space to use, including the explanation
    # if necessary.
done

INPUT="$(cat "$@")" # I think this will work with piped in input or with a filename
if [ "$INPUT" == '' ];then
    INPUT_LINES='0'
else
    INPUT_LINES="$(( 0 + $(echo "$INPUT" | wc -l) ))"
fi

if $AUTO_SCALE; then
    MAX_LINES="$( echo "sqrt($INPUT_LINES) + $AUTO_SCALE_MIN_LINES - 1" | bc )"
fi

SHOWN_LINES="$MAX_LINES"
if [ "$MAX_LINES" -gt "$INPUT_LINES" ]; then
    SHOWN_LINES="$INPUT_LINES"
fi

explanation="showing last $SHOWN_LINES lines out of $INPUT_LINES"
if [ "$SHOWN_LINES" -eq "$INPUT_LINES" ]; then
    explanation="showing ${INPUT_LINES} lines of output"
fi

if [ -n "$TITLE" ]; then
    TITLE_IN_PRACTICE="$TITLE"

    if ! [ $INPUT_LINES -gt $MAX_LINES -a $DIVIDER ]; then
        TITLE_IN_PRACTICE="$TITLE_IN_PRACTICE ('$(basename $0)' $explanation)"
    else
        TITLE_IN_PRACTICE="$TITLE_IN_PRACTICE (shown by '$(basename $0)')"
    fi

    if $DIVIDER; then
        echo_divider_with_text '-' "$TITLE_IN_PRACTICE"
    else
        echo "$TITLE_IN_PRACTICE"
    fi

fi

if [ $INPUT_LINES -gt $MAX_LINES ]; then
    if $DIVIDER; then
        echo_divider_with_text '^' "${explanation}:"
    else
        echo "${explanation}:"
    fi

    echo "$INPUT" | tail -n $MAX_LINES
elif [ -n "$INPUT" ]; then
    echo "$INPUT"
fi
