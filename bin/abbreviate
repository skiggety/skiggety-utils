#!/usr/bin/env bash

# The purpose of this script is to limit the length of output of something, so you could pipe something through this
# script and it would just pass it through if it's not too long, or print an explanation of how many lines were omitted
# and run tail otherwise.  TODO^4: # Maybe could RENAME it to 'tailmax', 'tail-verbose', or something?

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

DIVIDER=false
while [[ "$1" == -* ]]; do
    if [ "$1" == '-n' ]; then
        shift
        MAX_LINES="$1"
        shift
    elif [ "$1" == '-t' ]; then
        shift
        TITLE="$1"
        shift
    elif [ "$1" == '-d' ]; then
        DIVIDER=true
        shift
    fi
    # TODO^2: an alternate option to specify in terms of how many of the original lines to show instead of how many lines
    # on screen to use
    # TODO: help option should explain that -n tells it how many lines of screen space to use, including the explanation
    # if necessary.
done

INPUT="$(cat "$@")" # I think this will work with piped in input or with a filename
if [ "$INPUT" == '' ];then
    INPUT_LINES='0'
else
    INPUT_LINES="$(( 0 + $(echo "$INPUT" | wc -l) ))"
fi

if [ $INPUT_LINES -gt $MAX_LINES ]; then
    LINES_TO_SHOW="$(( $MAX_LINES - 1 ))" # becasue the explanation takes up 1 line
    if [ -z "$TITLE" ];then
        explanation="( showing last $LINES_TO_SHOW lines out of $INPUT_LINES: )"
    else
        explanation="( showing last $LINES_TO_SHOW lines out of $INPUT_LINES for '$TITLE': )"
    fi

    if $DIVIDER; then
        echo_divider_with_text '^' "$explanation"
    else
        echo "$explanation"
    fi

    echo -e "$INPUT" | tail -n $LINES_TO_SHOW
else
    echo -e "$INPUT"
fi
