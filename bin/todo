#!/usr/bin/env python3.9

import sys
import os
import subprocess
import argparse
import stat

sys.path.append(os.path.abspath(os.path.join(os.getenv('SKIGGETY_UTILS_DIR'),"lib")))
from todo_line import *

# TODO: accept piped-in grep output for sorting
if sys.version_info[0] < 3:
    raise Exception('Must be using Python 3')

PROGRAM_DESCRIPTION = 'finds TODOs, sorted by votes'

# TODO: accept --exclude-dir option, using:
# https://stackoverflow.com/questions/19859840/excluding-directories-in-os-walk

def main():
    """Find and display todo entries, according to options passed in."""

    # TODO: use argparse built-in way of setting defaaults instead:
    ignore_keyword = None

    arg_parser = argparse.ArgumentParser(description = PROGRAM_DESCRIPTION)
    arg_parser.add_argument('-k', '--keyword',
            help = 'Select a keyword. Defaults to \'TODO\'.') # IGNORE_TODO
    # TODO: add_argument('-i', '--ignore-keyword', help = 'TODO')
    arg_parser.add_argument('--exclude-dir', help = 'Directories to exclude.', action = 'append')
    command_line_args = arg_parser.parse_args()

    exclude_dirs = command_line_args.exclude_dir or []
    keyword = command_line_args.keyword or 'TODO' # because you can use other keywords # IGNORE_TODO
    # TODO: use argparse built-in way of setting defaaults instead:
    ignore_keyword = ignore_keyword or f'IGNORE_{keyword}'
    # TODO: validate that the keywords can only be letters, underscores, and some basic stuff

    todo_lines = []

    # TODO: refactor, too much nesting:
    keyword_regex        = re.compile(keyword)
    ignore_keyword_regex = re.compile(ignore_keyword)
    for root, dirs, file_paths in os.walk('.', topdown=True):
        dirs[:] = [d for d in dirs if d not in exclude_dirs]
        for file_path in file_paths:
            full_file_path = os.path.join(root, file_path)
            if (stat.S_ISBLK(os.stat(full_file_path).st_mode) or
                stat.S_ISSOCK(os.stat(full_file_path).st_mode) ): # skip devices
                continue
            with open(full_file_path) as file:
                line_number = 0
                try:
                    for line in file:
                        line = line.rstrip('\n')
                        line_number += 1
                        if keyword_regex.search(line):
                            if not ignore_keyword_regex.search(line):
                                todo_lines.append(TodoLine(keyword, full_file_path, line_number,
                                    line))
                except UnicodeDecodeError: # skip binary files
                    pass

    todo_lines = sorted(todo_lines, key = lambda l: (l.votecount, l.file_path, l.line_number))

    for todo_line in todo_lines:
        print(str(todo_line))

    # TODO: print summary with TODO count, maybe a vote count

# TODO: flags:

  # TODO TODO TODO: highlighting on or off. It should be on by default unless output is piped to a
  # file, like with grep and "--color" (or "--colour" )

    # TODO TODO: highlight TODO's

  # TODO: rewrite changes back to files or not. Off by default.

    # TODO TODO: there should also be a "force" mode with a "-f/--force" flag that can do the
    # replacements without asking

  # TODO TODO: todo should accept a path ( to a file or directory) to use in place of "." for grep.
  # This way you could run "todo bin/todo" and see the TODO's in this file cleanly without the
  # ingorable lines.

  # TODO: non-interactive [read-only] mode should be the default when this is called from a script
  # (output is not a tty)

  # TODO: add a command line option to specify a minimum number of votes, so if you pass
  # "--minimum-votes 3", "EXAMPLE_KEYWORD EXAMPLE_KEYWORD EXAMPLE_KEYWORD" or EXAMPLE_KEYWORD^3 will
  # show up, but not "EXAMPLE_KEYWORD EXAMPLE_KEYWORD"

  # TODO^3: when called from a terminal, this program should interactively check with the user if
  # they want to do replacements like "TODO TODO"-->"TODO^2" before displaying sorted output

# TODO: consider spinning this project off, with a not-so-clever name like "tood" or something

main()
