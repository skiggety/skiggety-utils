#!/usr/bin/env bash

# This script sleeps for a specified number of seconds, displaying progress as
# it goes.

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

# TODO^2?: integrate into a banner

# TODO^2?: take a '-m <message>' option to display a custom message

trap "exit 0" INT # seems to be necessary to cancel the alarm cleanly

PRINT_NEWLINE=true
SHOW_COUNTDOWN=false
while [[ "$1" == -* ]]; do
    if [ "$1" == "-n" ];then
        PRINT_NEWLINE=false
        shift
    elif [ "$1" == "--with-countdown" ]; then
        SHOW_COUNTDOWN=true
        shift
    fi
done

function main {
    delay="$1"

    # TODO^562 IN_PROGRESS NOW: synchronize this to the clock...the logic takes time too, so over time, this script ends up taking 3% or 4% too long...
    # - TODO^266 IN_PROGRESS: if $delay is a clock time, sleep until that time

    delay_remaining="$delay"

    while [ "$delay_remaining" -gt 0 ]; do
        if $SHOW_COUNTDOWN && [ $delay_remaining -le 30 ] && [ $delay -gt $(( $delay_remaining + 5 )) ]; then
            for nli in $(seq $(tput lines));do echo;done # TODO^3: maybe function extract as it wipes the screen and leaves the cursor at the bottom
            banner -w $(( 77 - $delay_remaining )) $delay_remaining
        fi
        echo -ne "  sleeping for $(seconds_as_hms $delay_remaining) (out of $(seconds_as_hms $delay))\033[0K\r"
        sleep 1 || exit_with_error "$(basename $0) stopped" # TODO^226: sleep longer than a second if there is still a long time to go
        : $((delay_remaining--))
    done
    echo -ne "  DONE! ($(basename $0) slept for $delay seconds)\033[0K\r"

    if $PRINT_NEWLINE; then
        echo
    fi
}
main "$@"
