#!/usr/bin/env bash

# This script sleeps for a specified number of seconds, displaying progress as
# it goes.

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

# TODO^2?: integrate into a banner

# TODO^2?: take a '-m <message>' option to display a custom message

trap "exit 0" INT # seems to be necessary to cancel the alarm cleanly

PRINT_NEWLINE=true
SHOW_COUNTDOWN=false
while [[ "$1" == -* ]]; do
    if [ "$1" == "-n" ];then
        PRINT_NEWLINE=false
        shift
    elif [ "$1" == "--with-countdown" ]; then
        SHOW_COUNTDOWN=true
        shift
    fi
done

function main {
    TARGET_SLEEP_SECONDS="${1:-1}"
    if [ -z "$TARGET_SLEEP_SECONDS" ] || ! [[ "$TARGET_SLEEP_SECONDS" =~ ^[0-9]+$ ]]; then
        echo "Usage: $0 <target_sleep_seconds>"
        exit 1
    fi

    START_TIME=$(date +%s)
    END_TIME=$(( $(date +%s) + TARGET_SLEEP_SECONDS ))
    echo -ne "  [ this process is ] sleeping for $(seconds_as_hms $TARGET_SLEEP_SECONDS)\033[0K\r"

    REMAINING_SLEEP=$((END_TIME - $(date +%s)))
    while [ $REMAINING_SLEEP -gt 0 ]; do
        if $SHOW_COUNTDOWN && [ $REMAINING_SLEEP -le 30 ] && [ $TARGET_SLEEP_SECONDS -gt $(( REMAINING_SLEEP + 5 )) ]; then
            for nli in $(seq $(tput lines)); do echo; done # Clear the screen
            banner -w $(( 77 - REMAINING_SLEEP )) "$REMAINING_SLEEP"
        fi
        echo -ne "  [ this process is ] sleeping for more yet: $(seconds_as_hms $REMAINING_SLEEP) (out of $(seconds_as_hms $TARGET_SLEEP_SECONDS))\033[0K\r"
        sleep $(( ($REMAINING_SLEEP / 120 ) + 1 )) || exit_with_error "$(basename $0) stopped" # Sleep longer than a second if there is still a long time to go
        REMAINING_SLEEP=$((END_TIME - $(date +%s)))
    done
    echo -ne "  DONE! ($(basename $0) slept for $TARGET_SLEEP_SECONDS seconds as of $(date) )\033[0K\r"

    if $PRINT_NEWLINE; then
        echo
    fi
}
main "$@"
