#!/usr/bin/env bash

# This script coordinates one pomodoro for you

# EASY TODO^86: use this script more often, maybe against your todo list
# - EASY TODO^99: (POINT) successful pomodoros should keep log and count and show score, so I can count them and confirm I'm doing them consistently
# - EASY TODO^47: also, count POINTs similarly from lines with 'POINT' in todays todo file.

# TODO^8?: exit early if you've done enough pomodoros in a day
# TODO^3: maybe accept a '--without-reward' option

# TODO^30: have a way to limit daily or weekly occurrences of the same pomodoro

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

# TODO^2: firstlife should have a linter to make sure this line is always used in bash scripts:
. $SKIGGETY_UTILS_DIR/lib/firstlife.bash || exit_with_error 'could not use common firstlife code'

WITH_BREAK='true'
WITH_ALARMS='true'
SLEEP_FOR="$(( 25 * 60 ))"
while [[ "$1" == -* ]]; do
    if [[ "$1" == '--with-alarms' ]]; then
        WITH_ALARMS='true'
        shift
    elif [[ "$1" == '--without-alarms' ]]; then
        WITH_ALARMS='false'
        shift
    elif [[ "$1" == '--without-break' ]]; then
        WITH_BREAK='false'
        shift
    elif [ "$1" == '-t' -o "$1" == '--time-in-minutes' ]; then
        # TODO^110: use this option in crontab for 1-hour woodworking sessions for example (6 times on a Saturday and 2 on a Sunday but only if you're at the woodshop)
        shift
        # TODO: could make sure it's a number...
        SLEEP_FOR_MINUTES="$1"
        SLEEP_FOR="$(( $SLEEP_FOR_MINUTES * 60 ))"
        # TODO^11: change out for a different youtube link...
        shift
    # TODO^10: elif [[ "$1" == '-n' ]]; then
    # TODO^10:     do n pomodoros
    else
        exit_with_error "unrecognized option: '$1'"
    fi
done

# TODO^83: wait for other pomodoros to be done, (use a mutex?)

if $WITH_ALARMS; then
    firstlife-alarm "Time for a pomodoro for '$@'!"
fi

if [ -z "$SLEEP_FOR_MINUTES" ]; then
    PROMPT="Ready to start a pomodoro for '$*' ?"
else
    PROMPT="Ready to start a ( $SLEEP_FOR_MINUTES minute ) pomodoro for '$*' ?"
fi
shellask "$PROMPT" || exit_with_error "skipped POMODORO for $*"
firstlife-reward "Started the POMODORO: $@"

# EASY TODO^11: or should this be done right in the terminal with sleep-verbose or firstlife-break instead of youtube and shellask:
# TODO: re-enable with the right duration: # open 'https://youtu.be/ddL3y1saEJs?si=UjSZicdCMYsVoIjV&t=00' 2>/dev/null & # generic 25 minute timer on youtube

clear
for nli in $(seq $(tput lines));do echo;done # TODO^16: maybe function extract as it wipes the screen and leaves the cursor at the bottom
echo;echo;echo;echo
echo '====                                                   ===='
echo '======     +------------------------------------+    ======'
echo '========   | YOU ARE WORKING ON A POMODORO for: |  ========'
echo '======     +------------------------------------+    ======'
echo '====                                                   ===='
echo '=='
echo '=='
echo '===='
echo '======     +-----------------------------------------------'
echo "========   | $*"
echo '======     +-----------------------------------------------'
echo '===='
echo '=='
echo;echo;

firstlife-mute-in-foreground --time-in-seconds $SLEEP_FOR || exit_with_error "ended pomodoro early for: $*"
if $WITH_ALARMS; then
    firstlife-alarm "OK, you can stop working on '$@' now if you need to!"
fi
task_description="Finish the POMODORO: $@"
firstlife-delegate --with-reward "$task_description" || exit_with_error "skipped pomodoro for: $*"
firstlife-log --type pomodoro "$task_description" # TODO^103: (FUN) display this output and productivity point count in firstlife-status like we do with rewards

exit_if_day_is_over

if $WITH_BREAK; then
    # TODO?: or should this be a 5-minute timer from youtube?:
    firstlife-break -t 300 # TODO: break length proportional to length of pomodoro by default?
fi

# redundant? TODO DELETE?: firstlife-alarm "This is the end of your post-pomodoro break.  Go do something!"

exit 0
