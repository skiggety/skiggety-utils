#!/usr/bin/env bash

# This script asks the user to do the task described and report status back.  It is a great way of stubbing out
# functionality, setting yourself one-off reminders, or....

# BONUS!!: It's also a good debug breakpoint.  Just write something like this in your code (let's say a bash script but
# you could call it from other languages and inspect environment variables, technically):
#
#     for whatever in $___whatever_the_point_is_you_are_deep_in_code__; do
#         if shellask "debug and decide whether you want to foo at $(echo_here)"
#         then
#             foo
#         else
#             definitely_do_not_foo
#         fi
#     done
#
# ...and then you can inspect, edit and run anything you need to, and, at the end, you get to control a binary switch
# because in some cases it's helpful to make a human decision a few times before you figure out how to teach^Wprogram
# the computer.

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
# including with THIS_DIR instead of SKIGGETY_UTILS_DIR so we can use it in demo_in_docker:
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

# TODO^20: figure out why this script occasionally fails to set the prompt.  It seems to still get as far as producing a
# reasonable looking DOUBLE_ESCAPED_TASK_DESCRIPTION, but doesn't actually set the prompt or the aliases:
#     TODO: figure out roughly what % of the time it happens, maybe with a test harness that repeats and logs 1000 times
#     or something, then you can test if changing certain things fixes across 1000 runs (or whatever the number is).

# TODO: learn a better pattern for configuration/design from Darren
SKIGGETY_DEBUG=true # TODO: DELETE once shellask sets the prompt reliably


debug_here "\$\* is: '$*'"
TASK_DESCRIPTION="$*"
debug_eval_here TASK_DESCRIPTION
ESCAPED_TASK_DESCRIPTION="$(echo "$TASK_DESCRIPTION" | sed 's/\(["\$]\)/\\\1/g')"
debug_eval_here ESCAPED_TASK_DESCRIPTION

# Try running the following to see why this is necessary: shellask 'spend $0 on "stuff"'.
DOUBLE_ESCAPED_TASK_DESCRIPTION="$(echo "$ESCAPED_TASK_DESCRIPTION" | sed 's/\(["\$]\)/\\\1/g')"
debug_eval_here DOUBLE_ESCAPED_TASK_DESCRIPTION
banner='########################################################################'

# TODO^2: can we do something to make the terminal tab blink?:
# ding
tput bel

debug_eval_here TASK_DESCRIPTION
echo_debug "Remember, exit 0 for yes/success or exit 1 for no/failure, will always work."

bash --rcfile <(if [ -f ~/.bashrc ]; then cat ~/.bashrc;fi;echo "alias yup='exit 0'" ;echo "alias nope='exit 1'";echo "PS1=\"${newline}$banner${newline}# TODO:${newline}# 1.) ${DOUBLE_ESCAPED_TASK_DESCRIPTION}${newline}# 2.) Run \\\"yup\\\" for success/yes, or \\\"nope\\\" to say failure/no.${newline}$banner${newline}\$PS1\"") - # IGNORE_TODO
exit $?
