#!/usr/bin/env bash

# This script asks the user to do the task described and report status back. It is a great way of stubbing out
# functionality, setting yourself one-off reminders, or....

# BONUS!!: It's also a good debug breakpoint. Just write something like this in your code (let's say a bash script but
# you could call it from other languages and inspect environment variables, technically):
#
#     for whatever in $___whatever_the_point_is_you_are_deep_in_code__; do
#         if shellask "debug and decide whether you want to foo at $(echo_here)"
#         then
#             foo
#         else
#             definitely_do_not_foo
#         fi
#     done
#
# ...and then you can inspect, edit and run anything you need to, and, at the end, you get to control a binary switch
# because in some cases it's helpful to make a human decision a few times before you figure out how to teach^Wprogram
# the computer.

# TODO^6: figure out why this sporadically fails to set the prompt

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"

# including with THIS_DIR instead of SKIGGETY_UTILS_DIR so we can use it in demo_in_docker:
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

debug_here "\$\* is: '$*'"
TASK_DESCRIPTION="$*"
debug_eval_here TASK_DESCRIPTION
ESCAPED_TASK_DESCRIPTION="$(echo "$TASK_DESCRIPTION" | sed 's/\(["\$]\)/\\\1/g')"
debug_eval_here ESCAPED_TASK_DESCRIPTION

# Try running the following to see why this is necessary: shellask 'spend $0 on "stuff"'.
DOUBLE_ESCAPED_TASK_DESCRIPTION="$(echo "$ESCAPED_TASK_DESCRIPTION" | sed 's/\(["\$]\)/\\\1/g')"
debug_eval_here DOUBLE_ESCAPED_TASK_DESCRIPTION
name_banner='############################## (shellask) ##############################'
banner='########################################################################'

# TODO^2: can we do something to make the terminal tab blink?:
# ding
tput bel

# TODO^3: can I rename these aliases to something more convenient? I mean "yes_shellask"? seriously?:
bash --rcfile <(if [ -f ~/.bashrc ]; then cat ~/.bashrc;fi;echo "alias yes_shellask='exit 0'" ;echo "alias no_shellask='exit 1'" ;echo "PS1=\"${newline}$name_banner${newline}# TODO:${newline}# 1.) ${DOUBLE_ESCAPED_TASK_DESCRIPTION}${newline}# 2.) Run \\\"yes_shellask\\\" for success/yes, or \\\"no_shellask\\\" to say no/failure.${newline}$banner${newline}\$PS1\"") - # IGNORE_TODO
exit $?
