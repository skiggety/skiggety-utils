#!/usr/bin/env bash

# This script show the part of pstree output that you probably want to see, and highlights a couple of key ancestor
# pids.

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

debug_here

function main {

    debug_here
    OLD_ANCESTOR=$(get_oldest_same_user_ancestor $$)
    debug_eval OLD_ANCESTOR
    YOUNG_ANCESTOR=$(get_oldest_consecutive_same_user_ancestor $$)
    debug_eval YOUNG_ANCESTOR

    # TODO: command line switch to show only what' in your one terminal bypassing $YOUNG_ANCESTOR instead of $OLD_ANCESTOR to pstree. Could play off the name, 'branch(es)', 'limb', I dunno.:

    PSTREE_COMMAND="pstree -p $OLD_ANCESTOR -g 2"
    debug_eval PSTREE_COMMAND

    DISPLAY=$($PSTREE_COMMAND)

    # # filter out innards of this script:
    # DISPLAY=$(echo "$DISPLAY" | grep -v "$PSTREE_COMMAND" | grep -v "root ps -axwwo user,pid,ppid,pgid,command$")

    # highlight the key points
    for keyword in "0*$PPID\>" "0*$YOUNG_ANCESTOR\>" "0*$OLD_ANCESTOR\>" "$(basename $0)"; do
        DISPLAY=$(echo "$DISPLAY" | highlight "$keyword" )
    done

    echo "$DISPLAY"
}

function get_oldest_consecutive_same_user_ancestor {
  SEEKING_PID="$1"
  debug_eval SEEKING_PID

  REAL_CURRENT_PROCESS_USER=$(get_process_user $SEEKING_PID)
  while [ $REAL_CURRENT_PROCESS_USER == $(get_process_user $SEEKING_PID) ];do
    PARENT_PID=$(get_ppid $SEEKING_PID)

    LAST_SEEKING_PID="$SEEKING_PID"
    SEEKING_PID="$PARENT_PID"
  done

  echo "$LAST_SEEKING_PID"
}

function get_oldest_same_user_ancestor {
    SEEKING_PID="$1"
    debug_eval SEEKING_PID

    REAL_CURRENT_PROCESS_USER=$(get_process_user $SEEKING_PID)
    debug_eval REAL_CURRENT_PROCESS_USER
    while [ "$SEEKING_PID" != "0" ]; do
        SEEKING_USER=$(get_process_user $SEEKING_PID)

        if [ "$REAL_CURRENT_PROCESS_USER" = "$SEEKING_USER" ];then
            ANCESTOR_PID="$SEEKING_PID"
        fi
        PARENT_PID="$(get_ppid "$SEEKING_PID")"
        debug_eval PARENT_PID
        SEEKING_PID="$PARENT_PID"
        debug_eval SEEKING_PID
    done

    debug_eval ANCESTOR_PID
    echo "$ANCESTOR_PID"
}

function get_ppid {
  if [ -n "$1" ];then
    PID="$1"
  else
    PID="$PPID"
  fi
  ps -fp $PID | awk "/$PID/"' {print $3}'
}

# TODO: DEBUG why this returns multiple users sometimes (try passing 0)
function get_process_user {
    PID=$1
    debug_eval_here PID
    if [ -z "$PID" ]; then
        exit_with_error "get_process_user expects to be passed a pid"
    fi
    ps -A -o pid,user -p $PID|grep -E "^[ ]*$PID\>"|awk '{print $2}'
}

# pipe into this
function highlight {
 grep --color=always -E "$1|\$"
}

debug_here
main "$@"
debug_here
