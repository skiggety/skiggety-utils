#!/usr/bin/env bash

# This script helps you get started on a task, and ultimately do a pomodoro's worth of work on it.

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

NEEDED_TIME_IN_MINUTES=25 # make changeable like with pomodoros

while [[ "$1" == -* ]]; do
    if [ "$1" == '-t' -o "$1" == '--time-in-minutes' ]; then
        shift
        # TODO: could make sure it's a number...
        NEEDED_TIME_IN_MINUTES="$1"
        shift
    fi
done

TITLE="$*"

POMODORO_MINUTES=1
while [ $NEEDED_TIME_IN_MINUTES -gt 0 ] && ! shellask "Is '$TITLE' done yet (or at least done enough for today)?"; do
    if [ $NEEDED_TIME_IN_MINUTES -lt $POMODORO_MINUTES ]; then
        POMODORO_MINUTES="$NEEDED_TIME_IN_MINUTES"
    fi
    firstlife-pomodoro --with-alarms --time-in-minutes $POMODORO_MINUTES --without-break "Work on '$TITLE' for $POMODORO_MINUTES minutes" # TODO?: --without-reward and do rewards separately
    NEEDED_TIME_IN_MINUTES=$(( $NEEDED_TIME_IN_MINUTES - $POMODORO_MINUTES ))

    BREAK_SECONDS=$(( ( $POMODORO_MINUTES * 10 ) + 30 ))
    firstlife-break -t $BREAK_SECONDS
    exit_if_day_is_over
    POMODORO_MINUTES="$(( $POMODORO_MINUTES + 1 ))"
done
exit 0
firstlife-gamify "Work on '$*' up to 25 total minutes" || \
    exit_with_error "TODO^122: IMPLEMENT for real" # Call firstlife-gamify with a new argument to limit the total time, so you can do a pomodoros worth of work a few minutes at a time to make it easier to get started.
