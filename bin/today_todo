#!/usr/bin/env bash

# This is how I trick myself into getting things done. It basically helps organize and display a series of text files
# containing a todo list with the usual keyword and voting (see 'todo' program).

# TODO^5: RENAME? ("todo-today"?, "todoy")
# TODO: flag to grep for and count a specific word, sort of like what I do for "NOW"
# TODO: "-q" or "-n" flag to be quick, and skip the editor phase
# TODO: how about a mode for the edit phase only?

# TODO: this program needs to display some instructions so the user knows how to use it.
# TODO: maybe during business hours, show results with "BUSINESS_HOURS" more prominently, and hide them otherwise

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

function main {
    for arg in "$@"; do
        shift
        case "$arg" in
            --non-interactive) set -- "$@" "-n" ;;
            *)                 set -- "$@" "$arg" ;;
        esac
    done

    # defaults
    interactive=true

    OPTIND=1
    while getopts ":inhi?" opt; do
        case "$opt" in
            "i") interactive=true ;;
            "n") interactive=false ;;
            "h") exit_with_error "TODO: print usage" ;;
            "?") exit_with_error "TODO: print usage" ;;
            *) ;;
        esac
    done
    # TODO: accept a keyword argument, e.g. "-k WOODSHOP". When you open the editor it's already searching for it and it
    # prints much like CONFIRMING on the report. Could accept multiple keyword arguments.

    isotoday="$(isotoday)"

    todo_list_file_name="TODO.$isotoday.txt" # IGNORE_TODO
    todo_list_dir_path="$HOME/$(basename $0)"

    mkdir -p "$todo_list_dir_path"
    cd "$todo_list_dir_path"

    if $interactive; then
        if [ -f "$todo_list_file_name" ]; then
            files_to_open="$todo_list_file_name"
        else
            files_to_open="$todo_list_file_name ."
        fi
        echo "- TODO: ..." >> "$todo_list_file_name" # IGNORE_TODO
        vim -o $files_to_open '+/\.\.\.' # TODO^6: here and elsewhere, use $EDITOR, not vim
    fi

    # TODO: maybe automate the archiving, too?
    EXCLUDE_DIR_ARGS="--exclude-dir archive"

    echo "It's time to compact todo's in $0"
    todo -wfq $EXCLUDE_DIR_ARGS
    PAUSE_TO_READ=1
    if $interactive; then
        clear
    fi

    # TODO: consider extracting the rest of this script to "today_todo_display", which can be overridden with PWD_BIN, or
    # alternatively we could do like 'todo' and use flags to turn editing and reporting on and off:

    echo "Last few todos DONE:"
    todo -k DONE $EXCLUDE_DIR_ARGS | tail -n 3 | grep --color=always DONE
    if $interactive; then sleep-verbose $PAUSE_TO_READ;fi

    todo_output="$(todo --color always $EXCLUDE_DIR_ARGS)" # TODO: -n 5 # TODO^2: todo should accept an option for the number of lines. like "-n 3". Maybe if we pass an option in?

    todo_count=$(( 0 + $(echo "$todo_output" | wc -l) ))
    echo
    echo "Found $todo_count todos, showing 10:"
    echo "$todo_output" | tail -n 10 | grep --color=always TODO
    if $interactive; then sleep-verbose $PAUSE_TO_READ;fi

    # only collected for graph, not displayed # TODO: rethink this keyword entirely
    todo_later_output="$(echo "$todo_output" | grep LATER)"
    todo_later_count=$(( 0 + $(echo "$todo_later_output" | wc -l) ))
    # TODO: do something with $todo_later_output, or get rid of this paragraph

    todo_prog_output="$(echo "$todo_output" | grep IN_PROGRESS | grep -v LATER)"
    todo_prog_count=$(( 0 + $(echo "$todo_prog_output" | wc -l) ))
    echo
    echo "Found $todo_prog_count todos IN_PROGRESS:"
    echo "$todo_prog_output" | grep --color=always IN_PROGRESS
    if $interactive; then sleep-verbose $PAUSE_TO_READ;fi

    display_grep_for_keyword CONFIRMING "$todo_output"

    # TODO^2: if it's around new years:
    display_grep_for_keyword NEW_YEARS_RESOLUTION "$todo_output"

    # TODO^4: add NOW count to graph:
    # TODO^2: NOW output should be highlighted.
    todo_now_output="$(echo "$todo_output" | grep --color=always NOW)"
    todo_now_count=$(( 0 + $(echo "$todo_now_output" | wc -l) ))
    if [ "$todo_now_output" != "" ]; then
        if (( $todo_now_count > 3 )); then
            only_showing=", only showing 3"
        else
            only_showing=''
        fi

        echo
        echo "Found $todo_now_count todos to do right NOW$only_showing:" | grep --color=always \\d
        echo "$todo_now_output" | tail -n 3
        if $interactive; then sleep-verbose $PAUSE_TO_READ;fi
    fi

    # TODO^4: add NOW count to this output?:
    echo "$(( $todo_count + $todo_prog_count )) combined score, $todo_prog_count todos IN_PROGRESS"

    if $interactive; then
        # graph how many are done each day
        # TODO: what date format should I use?:
        echo "$isotoday,$todo_count,$todo_prog_count,$todo_later_count,$(( $todo_count + $todo_prog_count ))" >> graph.csv
    fi
}

function display_grep_for_keyword {
    KEYWORD="$1" # e.g. "CONFIRMING"
    TEXT="$2" # e.g. "$todo_output"

    todo_keyword_output="$(echo "$TEXT" | grep --color=always "$KEYWORD")"
    todo_keyword_count=$(( 0 + $(echo "$todo_keyword_output" | wc -l) ))
    if [ "$todo_keyword_output" != "" ]; then
        echo
        echo "Found $todo_keyword_count todos with \"$KEYWORD\":" | grep --color=always \\d
        echo "$todo_keyword_output"
    fi
}

main "$@"
