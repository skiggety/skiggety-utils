#!/usr/bin/env bash

# This script helps you set up vital so that your $VITAL_DIR, where your data is stored, gets checked in as a repository
# somewhere, so you have a backup and you can use it from multiple places

. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1
. $SKIGGETY_UTILS_DIR/lib/vital.bash || exit_with_error 'could not include vital.bash'

pushd "$VITAL_DIR" > /dev/null

if ! git rev-parse; then

    shellask "move some files to archive/ if necessary"

    VITAL_BACKUP_DIR="${VITAL_DIR}.bak"
    cp -a "$VITAL_DIR" "$VITAL_BACKUP_DIR"

    if ! shellask "Do you already have a github repository for your changes?"; then
        shellask "Please make a github repository and keep a web browser open so you can refer to it" || exit_with_error 'No origin repository'
    fi

    if ! shellask "Does your github repository already have your data in it?"; then
        shellask "Please follow the instructions on github to 'create a new repository on the command line'." || exit_with_error 'did not push data up'
    fi

    if ! git rev-parse; then
        cd ..
        mv $VITAL_DIR $VITAL_DIR.tmp
        shellask "git clone <REPO> $VITAL_DIR" || exit_with_error "FAILED to git clone repository"
        cd $VITAL_DIR
        shellask "Am I supposed to git clone or something?, esp on tinhat, cleanup $(echo_here)" || exit_with_error "TODO"
        shellask "Get anything you want out of ${VITAL_DIR}.tmp, then delete it" || exit_with_error "Left ${VITAL_DIR}.tmp"
    fi
fi

git-set-matching-origin || exit_with_error 'git-set-matching-origin FAILED'
vital-push-data # first attempt, no error checking

mkdir -p './PWD_BIN'
RESTORE_SCRIPT='./PWD_BIN/git-restore-generated-files'
if ! [ -f "$RESTORE_SCRIPT" ]; then
    shebang env bash > "$RESTORE_SCRIPT"
    chmod +x "$RESTORE_SCRIPT"
    echo >> "$RESTORE_SCRIPT"
    echo 'git restore graph.csv' >> "$RESTORE_SCRIPT"
    echo 'git restore --staged graph.csv' >> "$RESTORE_SCRIPT"
    echo 'git restore *todo_report.csv' >> "$RESTORE_SCRIPT"
    echo 'git restore --staged *todo_report.csv' >> "$RESTORE_SCRIPT"
    echo 'exit 0' >> "$RESTORE_SCRIPT"
    git add "$RESTORE_SCRIPT"
fi
git safe-pull || echo "It might be ok that the first try at pulling failed"

shellask "Do you need to bring other changes in from the backup, or delete the backup? esp on tinhat, cleanup $(echo_here)"
vital-push-data || shellask "resolve issues in this directory and maybe (TODO) edit $(echo_here)" || accumulate_error "vital-push-data FAILED"

popd > /dev/null
