#!/usr/bin/env bash
# TODO: consider #!/usr/bin/env python3 OR #!/usr/bin/env ruby

# This script provides a general purpose status report that is sensitive to the current directory. If you are in a git repo for a coding project, it'll give you an idea of h√∏w tests are doing, what's left to do/commit, etc. It will usuually be called from that directory's ./PWD_BIN/dashboard script to form the bulk of the output

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

echo_divider_with_text "-=" "TODO's:" # IGNORE_TODO
if [ -f ./todo_report/README.txt ]; then
    cat ./todo_report/README.txt | grep --color=always -A 10 -B 10 TODO # grep is just to highlight
else
    # purposely call whatever 'todo' is in the path so you can override it with PWD_BIN/todo
    todo | tail -n 5 || exit_with_error "todo FAILED" # TODO^2: abbreviate -n 5 todo
fi

# TODO^4: put test output right here if tests failed so todo's are the thing to scroll off the top of the screen instead of this.

# TODO^2: only do git stuff if it's a git repository

git_stash_list="$(git stash list)"
if [ "$git_stash_list" != "" ]; then
    echo_divider_with_text "-=" "git stash list:"
    echo "$git_stash_list"
fi

unset GIT_EXTERNAL_DIFF # if call this from inside a git-vimdiff, we still want "git diff" to behave normally
# echo_divider_with_text "-" "git diff of unstaged files:"
# for next in $( git ls-files --others --exclude-standard ) ; do git -c color.ui=always --no-pager diff --no-index /dev/null $next; done | head -n 15  # git diff for files not checked in yet only?
echo_divider_with_text "-=" "git diff:"
git -c color.ui=always --no-pager diff -U1 | head -n 17
# TODO: this shows a more complete diff, including new files...do I want to use it instead?: for next in $( git ls-files --others --exclude-standard ) ; do git --no-pager diff --no-index /dev/null $next; done; # git diff

DO_NOT_ADD="$(git diff --inter-hunk-context=1 | grep '^[+].*[X]XX')"
if ! [ -z "$DO_NOT_ADD" ]; then
    echo_divider_with_text "!" "DO NOT ADD (X""XX) :"
    echo_error "$DO_NOT_ADD"
fi

# TODO: TEST with and without 0 files changed:
echo_divider_with_text "-=" "git status:"
GIT_STATUS="$(git -c color.ui=always --no-pager status -ss)"
if [ "$GIT_STATUS" == "" ] ;then
    GIT_STATUS_LINECOUNT=0
else
    GIT_STATUS_LINECOUNT="$(echo "$GIT_STATUS"|wc -l)"
    echo "$GIT_STATUS"
fi
echo "$GIT_STATUS_LINECOUNT files with changes"

DO_NOT_COMMIT="$(git diff --staged --inter-hunk-context=1 | grep '^[+].*[X]XX')"
if ! [ -z "$DO_NOT_COMMIT" ]; then
    echo_divider_with_text "!" "DO NOT COMMIT these git added files with (\"X""XX\"):"
    echo_error "$DO_NOT_COMMIT"
    # TODO: echoing the line number this is coming from is distracting:
    exit_with_error "You have staged lines including \"X""XX\". fix with: git restore --staged <file>..."
fi

# TODO: why is this producing so much output lately, like in content manager, even when there have only been a few
# commits in the feature branch?:
echo_divider_with_text "-=" "git log: (most recent commit and un-pushed commits)"
git -c color.ui=always --no-pager log --oneline --decorate=short origin/HEAD~..HEAD -n 15
