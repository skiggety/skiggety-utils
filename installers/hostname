#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/installable_skiggety_util'

class HostnameSetup

  # TODO: enforce all-lowercase, numbers not in first character, etc. ...or whatever works for dns

  # TODO: perhaps require dns server config (check with nslookup or an
  # equivalent library) --this might help with synergy config, etc.

  #   TODO: To systematize this, you could find the ip address of the local gatteway and pop it up in a browser

  include InstallableSkiggetyUtil

  def apparently_installed?
    true # nothing to install, configuration only
  end

  def apparently_configured?
    return true if in_docker_demo?

    apparent_hostname = `hostname`.chomp
    desired_hostname == apparent_hostname or desired_hostname + '.local' == apparent_hostname
    # TODO: verify nslookup, which means router config will be part of configuration process
  end

  def configure!
    if on_mac_os?
      if $interactive
        puts 'Sudo password will be needed to set hostname:'
        %w[LocalHostName ComputerName].each do |sc_name|
          assert_system("sudo scutil --set #{sc_name} #{desired_hostname}")
        end
      else
        raise_interactive_only_configuration
      end
    else
      raise NotImplementedError, 'TODO: implement this for this OS'
    end
  end

  def desired_hostname
    @desired_hostname ||= calc_desired_hostname
  end

  def calc_desired_hostname
    desired_hostname_file = self_config_path('localhost.gitignored.txt')
    if $interactive
      if File.exist?(desired_hostname_file)
        puts "Found #{desired_hostname_file}"
      else
        ask_user "Please put your desired hostname in #{desired_hostname_file}"
      end
    end
    if File.exist?(desired_hostname_file)
      `cat #{desired_hostname_file}`.chomp
    else
      raise "Please put desired hostname in #{desired_hostname_file} and try again"
    end
  end

end

# TODO^3: use this more widely if call_peer_installer uses a direct include method?:
HostnameSetup.run if __FILE__ == $PROGRAM_NAME
