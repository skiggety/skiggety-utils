#!/usr/bin/env bash

# I need skiggety.bash and homebrew for rbenv, and I need rbenv for the latest
# ruby, and I need the a known recent ruby to test/write/run the rest of the
# installers, hence this bootstrapping script to get us up to the point of
# having a recent ruby.

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

function main {

    for arg in "$@"; do
        shift
        case "$arg" in
            --non-interactive) set -- "$@" "-n" ;;
            *)                 set -- "$@" "$arg" ;;
        esac
    done

    # defaults
    interactive=true

    OPTIND=1
    while getopts ":inhi?" opt; do
        case "$opt" in
            "i") interactive=true ;;
            "n") interactive=false ;;
            "h") exit_with_error "TODO: print usage" ;;
            "?") exit_with_error "TODO: print usage" ;;
            *) ;;
        esac
    done

    debug_here "got options"

    self_hash="$(git hash-object $0)" # TODO: perhaps use a hash that takes the Gemfile into account as well?
    completed_markers_start_with="$THIS_DIR/.$(basename $0).updated_with_version."
    completed_marker="$completed_markers_start_with$self_hash"

    #if ! $interactive; then # TODO: should this really depend on interactive mode? how about unless --force ?
    if [ -f $completed_marker ]; then
        debug_here "completed marker $completed_marker exists"
        if find $completed_marker -mtime -1 | grep $completed_marker >/dev/null; then
            completed_marker_time="$(ls -l $completed_marker| awk '{print $6" "$7" "$8}')"
            debug_here "$(basename $(dirname $0))/$(basename $0) has already completed in the last day (at $completed_marker_time), so skipping updates in non-interactive mode."
            exit 0
        fi
    fi
    # fi

    # homebrew
    if on_mac_os;then
        echo "Installing latest homebrew"
        if brew --version; then
            brew update || exit_with_error "failed to update homebrew"
        else
            if $interactive;then
                echo "You will need to type your password for sudo access..."
                bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" ||
                    exit_with_error "failed to install homebrew, please check http://brew.sh"
            else
                exit_with_error "must run $(basename $0) interactively to install homebrew"
            fi
        fi
        brew upgrade
    fi

    # TODO?: install latest bash and make sure other scripts are compatible...

    debug_here "rbenv:"
    # rbenv
        # some rbenv reading material:
        ### https://medium.com/@namangupta01/replacing-rvm-with-rbenv-in-os-x-9dea622bd639#:~:text=Both%20rbenv%20and%20RVM%20are,lightweight%20Ruby%20version%20management%20tool.
        ### https://github.com/rbenv/rbenv/issues/1100
        ### https://javierjulio.com/rbenv/#section_3.2
    echo "Installing latest rbenv"
    rvm --version 2>/dev/null && ask_user to uninstall rvm with rvm implode
    if on_mac_os;then
        homebrew_install_latest rbenv
        homebrew_install_latest ruby-build # plugin for rbenv
    else # TODO: if on linux
        local rbenv_dir="$HOME/.rbenv"
        if ! [ -d $rbenv_dir ]; then
            git clone https://github.com/rbenv/rbenv.git $rbenv_dir
        fi
        pushd $rbenv_dir
        git pull
        popd

        local ruby_build_dir="$rbenv_dir/plugins/ruby-build"
        if ! [ -d $ruby_build_dir ]; then
            git clone https://github.com/rbenv/ruby-build.git $ruby_build_dir
        fi
        pushd $ruby_build_dir
        git pull
        popd
        if ! bundler --version;then
            if $interactive;then
                echo "You will need to type your password for sudo access..."
                sudo apt-get install bundler ||
                    exit_with_error "failed to install bundler!"
            else
                exit_with_error "must run $(basename $0) interactively to install bundler"
            fi
        fi
    fi
    debug_here "got rbenv, time for ruby"
    # TODO TODO: install rbenv-aliases?

    # ruby
    ruby_version="$(cat $SKIGGETY_UTILS_DIR/.ruby-version)"
    if rbenv versions | grep "\* $ruby_version" > /dev/null; then
        echo "ruby $ruby_version is already installed."
    else
        echo "Installing ruby $ruby_version:"
        rbenv install $ruby_version || accumulate_error "failed to install ruby"
        rbenv versions
    fi

    debug_here "got ruby, time to try to fix bundler?"
    gem update --system || run_only_if_interactive sudo gem update --system || exit_with_error "gem failed to update system"
    debug_here "got ruby, time to make sure bundler is installed?"
    gem install bundler || run_only_if_interactive sudo gem install bundler || exit_with_error "failed to install bundler"

    debug_here "let's make sure bundler is ok:"
    bundle --version || exit_with_error "bundler is not working"

    debug_here "time for ruby_setup"

    $THIS_DIR/../PWD_BIN/ruby_setup || exit_with_error "failed to set up prerequisites for my ruby code, such as gems"

    #install pyenv prerequisites
    if ! on_mac_os;then
        for package in make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev;do
            if apt -qq list $package 2>&1 | grep installed >/dev/null; then
                echo "$package is already installed"
            else

                if $interactive;then
                    sudo apt-get install -y $package
                else
                    exit_with_error "must run $(basename $0) interactively to install $package"
                fi
            fi
        done
    fi

    # pyenv
    echo "Installing latest pyenv"
    if on_mac_os;then
        homebrew_install_latest pyenv
    else
        local pyenv_dir="$HOME/.pyenv"
        if ! [ -d $pyenv_dir ]; then
            git clone https://github.com/pyenv/pyenv.git $pyenv_dir
        fi
        pushd $pyenv_dir
        git config pull.rebase true
        git pull
        popd
    fi

    # python
    python_version="$(cat $SKIGGETY_UTILS_DIR/.python-version)"
    if pyenv versions | grep "\* $python_version" > /dev/null; then
        echo "python $python_version is already installed."
    else
        echo "Installing python $python_version:"
        pyenv install $python_version || accumulate_error "failed to install python"
        pyenv versions
    fi

    echo "Updating pip..."
    python -m pip install --upgrade pip

    echo "Installing nose2" # TODO: move
    pip install nose2

    if ! which pylint > /dev/null; then
        echo "Installing pylint"
        python -m pip install pylint
    fi

    exit_if_any_accumulated_errors # before marking complete

    # mark complete
    rm "$completed_markers_start_with"*
    touch "$completed_marker"
}

function run_only_if_interactive {
    if $interactive; then
        $@ || { echo_error_here "could not run: $@"; return 1; }
    else
        echo_error_here "must run $(basename $0) interactively to run: $@"
        return 1
    fi
}

function on_mac_os {
    if uname -a | grep Darwin >/dev/null;then
        return 0
    else
        return 1
    fi
}

function homebrew_install_latest {
   target="$1"
   brew upgrade "$target" || brew install "$target" || accumulate_error "could not install latest $target with homebrew"
}

main "$@"
