#!/usr/bin/env bash

# I need skiggety.bash and homebrew for asdf, and I need asdf for the latest ruby, and I need the a known recent ruby to
# test/write/run the rest of the installers, hence this bootstrapping script to get us up to the point of having a
# recent ruby.

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"

# include with THIS_DIR instead of SKIGGETY_UTILS_DIR so we can call it from the Dockerfile to boostrap some other
# stuff:
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

function main {

    for arg in "$@"; do
        shift
        case "$arg" in
            --non-interactive) set -- "$@" "-n" ;;
            *)                 set -- "$@" "$arg" ;;
        esac
    done

    # defaults
    interactive=true

    OPTIND=1
    while getopts ":inhi?" opt; do
        case "$opt" in
            "i") interactive=true ;;
            "n") interactive=false ;;
            "h") exit_with_error "TODO: print usage" ;;
            "?") exit_with_error "TODO: print usage" ;;
            *) ;;
        esac
    done

    debug_here "got options"

    self_hash="$(git hash-object $0)" # TODO: perhaps use a hash that takes the Gemfile into account as well?
    completed_markers_start_with="$THIS_DIR/.markers/$(basename $0).updated_with_version."
    completed_marker="${completed_markers_start_with}${self_hash}"

    #if ! $interactive; then # TODO: should this really depend on interactive mode? how about unless --force ?
    if [ -f $completed_marker ]; then
        debug_here "completed marker $completed_marker exists"
        if find $completed_marker -mtime -1 | grep $completed_marker >/dev/null; then # TODO: explanatory comment
            completed_marker_time="$(ls -l $completed_marker| awk '{print $6" "$7" "$8}')"
            debug_here "$(basename $(dirname $0))/$(basename $0) has already completed in the last day (at $completed_marker_time), so skipping updates in non-interactive mode."
            # TODO: maybe exiting early should also be conditional on whether .tools-versions and maybe other files have
            # been updated since the marker file.    Another alternative would be to separate out the python and ruby
            # installers and handle this sort of situation in installable_skiggety_utils, although that would create a
            # circular dependency with ruby...
            exit 0
        fi
    fi
    # fi

    install_basic_prerequisites

    exit_with_any_accumulated_errors # before marking complete

    # mark complete
    debug_here "marking $0 complete"
    rm "$completed_markers_start_with"* 2> /dev/null
    touch "$completed_marker"
}

function install_basic_prerequisites {
    install_homebrew || exit_with_error "FAILED to install homebrew"
    eval $(/opt/homebrew/bin/brew shellenv)

    # TODO^192 IN_PROGRESS NOW: install latest bash and make sure other scripts are compatible...
    homebrew_install_latest bash

    install_asdf_prerequisites

    if rvm --version 2>/dev/null; then
        shellask to uninstall rvm with rvm implode || exit_with_error "cannot proceed with rvm installed"
    fi

    for old_tool_version_manager in rbenv pyenv;do
        if which $old_tool_version_manager 2>/dev/null; then
            exit_with_error "$old_tool_version_manager is still installed. Please uninstall it and try again"
        fi
        if [ -d ~/.${old_tool_version_manager} ];then
            exit_with_error "Please remove '~/.${old_tool_version_manager}' directory before proceeding"
        fi
    done

    install_asdf

    asdf plugin-add direnv
    asdf plugin-update direnv
    source "${XDG_CONFIG_HOME:-$HOME/.config}/asdf-direnv/bashrc"
    asdf direnv setup --shell bash --version latest
    asdf global direnv latest

    # ruby
    install_ruby
    do_ruby_basics

    debug_here "got tool version manager(s), time for ruby, python, and rust"
    install_python

    update_pip
    install_nose2
    install_pylint

    # EASY TODO^22: install_rust

    # set global tools versions:
    asdf global ruby 3.3.4
    asdf global python 3.11.1
}

function install_homebrew {
    debug_here 'Homebrew:'
    # Homebrew
    if on_mac_os;then
        echo "Installing latest Homebrew"
        if brew --version 2> /dev/null; then
            brew update || exit_with_error "FAILED to get newest version of Homebrew"
        else
            if $interactive;then
                echo "You will need to type your password for sudo access..."
                bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" ||
                    exit_with_error "FAILED to install Homebrew, please check http://brew.sh"
            else
                exit_with_error "must run $(basename $0) interactively to install Homebrew"
            fi
        fi
        # TO-NOT-DO: brew upgrade # to just update everything in homebrew
    fi
}

# TODO: pare down the list for asdf (in Dockerfile too), as this list was really created as prerequisites for rbenv and
# pyenv.  'asdf' says it just needs curl and git, but the different plugins can have their own prerequisites which might
# be similar to this list::

function install_asdf_prerequisites {
    debug_here "time for asdf prerequisites"
    if ! on_mac_os;then
        # TODO^4: un-loop, it's too slow:
        for package in make build-essential libssl-dev zlib1g-dev libbz2-dev libreadline-dev libsqlite3-dev libyaml-dev wget curl llvm libncurses5-dev libncursesw5-dev xz-utils tk-dev;do
            if apt -qq list $package 2>&1 | grep installed >/dev/null; then
                echo "$package is already installed"
            else
                if $interactive || [ "$(whoami)" == 'root' ] ;then
                    sudo apt-get install -y $package
                else
                    exit_with_error "must run $(basename $0) interactively to install $package"
                fi
            fi
        done
    fi
}

# TODO^271 IN_PROGRESS: upgrade to asdf 0.16.0 or later ( open 'https://asdf-vm.com/guide/upgrading-to-v0-16#breaking-changes' )
function install_asdf {
    debug_here "asdf:"
    echo "Installing asdf"
    local asdf_dir="$HOME/.asdf"
    if ! [ -d $asdf_dir ]; then
        git clone https://github.com/asdf-vm/asdf.git "$asdf_dir" --branch v0.11.2 || accumulate_error "Could not clone asdf"
    fi
    asdf update --head
}

function install_ruby {
    asdf plugin-add ruby
    asdf plugin-update ruby

    if on_mac_os; then
        homebrew_install_latest libyaml # workaround to psych not installing and blocking ruby install: https://github.com/asdf-vm/asdf-ruby/issues/386
    fi

    asdf install ruby || exit_with_error "'asdf install ruby' FAILED -- Could not install ruby"
}

function do_ruby_basics {
    if ! [ -f /.in_docker_demo ]; then
        debug_here "got ruby, time to try to fix bundler?"
        gem update --system || run_only_if_interactive sudo gem update --system || exit_with_error "gem FAILED to update system"
    fi
    debug_here "got ruby, time to make sure bundler is installed?"
    gem install bundler || run_only_if_interactive sudo gem install bundler || exit_with_error "FAILED to install bundler"
    debug_here "let's make sure bundler is ok:"
    bundle --version || exit_with_error "bundler is not working"
    debug_here "time for ruby_setup"
    $THIS_DIR/../PWD_BIN/ruby_setup || exit_with_error "FAILED to set up prerequisites for my ruby code, such as gems"
}

function install_python {
    asdf plugin-add python
    asdf plugin-update python
    asdf install python
}

function update_pip {
    debug_here "pip:"
    echo "Updating pip..."
    python -m pip install --upgrade pip
}

function install_nose2 {
    debug_here "nose2:"
    echo "Installing nose2" # TODO: move
    pip install nose2
}

function install_pylint {
    debug_here "pylint:"
    if ! pylint --version >/dev/null; then
        echo "Installing pylint"
        python -m pip install pylint
    fi
}

function run_only_if_interactive {
    if $interactive; then
        $@ || { echo_error_here "could not run: $@"; return 1; }
    else
        echo_error_here "must run $(basename $0) interactively to run: $@"
        return 1
    fi
}

function on_mac_os {
    if uname -a | grep Darwin >/dev/null;then
        return 0
    else
        return 1
    fi
}

function homebrew_install_latest {
   target="$1"
   brew upgrade "$target" || brew install "$target" || accumulate_error "could not install latest $target with homebrew"
}

main "$@"
