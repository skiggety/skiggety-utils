#!/usr/bin/env bash

# I need skiggety.bash and homebrew for rbenv, and I need rbenv for the latest
# ruby, and I need the a known recent ruby to test/write/run the rest of the
# installers, hence this bootstrapping script to get us up to the point of
# having a recent ruby.

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

function main {

    for arg in "$@"; do
        shift
        case "$arg" in
            --non-interactive) set -- "$@" "-n" ;;
            *)                 set -- "$@" "$arg" ;;
        esac
    done

    # defaults
    interactive=true

    OPTIND=1
    while getopts ":inhi?" opt; do
        case "$opt" in
            "i") interactive=true ;;
            "n") interactive=false ;;
            "h") exit_with_error "TODO: print usage" ;;
            "?") exit_with_error "TODO: print usage" ;;
            *) ;;
        esac
    done

    self_hash="$(git hash-object $0)" # TODO: perhaps use a hash that takes the Gemfile into account as well?
    completed_markers_start_with="$THIS_DIR/.$(basename $0).updated_with_version."
    completed_marker="$completed_markers_start_with$self_hash"

    if ! $interactive; then
        if [ -f $completed_marker ]; then
            if find $completed_marker -mtime -1 | grep $completed_marker >/dev/null; then
                completed_marker_time="$(ls -l $completed_marker| awk '{print $6" "$7" "$8}')"
                echo "$(basename $(dirname $0))/$(basename $0) has already completed in the last day (at $completed_marker_time), skipping updates in non-interactive mode."
                exit 0
            fi
        fi
    fi

    # homebrew
    if uname -a | grep Darwin >/dev/null;then
        echo "Installing latest homebrew"
        if brew --version; then
            brew update || exit_with_error "failed to update homebrew"
        else
            if $interactive;then
                echo "You will need to type your password for sudo access..."
                bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install.sh)" ||
                    exit_with_error "failed to install homebrew, please check http://brew.sh"
            else
                exit_with_error "must run $(basename $0) interactively to install homebrew"
            fi
        fi
    fi

    # rbenv
        # some rbenv reading material:
        ### https://medium.com/@namangupta01/replacing-rvm-with-rbenv-in-os-x-9dea622bd639#:~:text=Both%20rbenv%20and%20RVM%20are,lightweight%20Ruby%20version%20management%20tool.
        ### https://github.com/rbenv/rbenv/issues/1100
        ### https://javierjulio.com/rbenv/#section_3.2
    echo "Installing latest rbenv"
    rvm --version 2>/dev/null && ask_user to uninstall rvm with rvm implode
    if uname -a | grep Darwin >/dev/null;then
        homebrew_install_latest rbenv
    else
        local rbenv_dir="$HOME/.rbenv"
        if ! [ -d $rbenv_dir ]; then
            git clone https://github.com/rbenv/rbenv.git $rbenv_dir
        fi
        pushd $rbenv_dir
        git pull
        popd

        local ruby_build_dir="$rbenv_dir/plugins/ruby-build"
        if ! [ -d $ruby_build_dir ]; then
            git clone https://github.com/rbenv/ruby-build.git $ruby_build_dir
        fi
        pushd $ruby_build_dir
        git pull
        popd
    fi
    # TODO TODO: install rbenv-aliases?

    # ruby
    echo "Installing ruby"
    echo n | rbenv install $(cat $SKIGGETY_UTILS_DIR/.ruby-version) # echoing n is to avoid reinstall
    rbenv versions

    # TODO TODO TODO TODO TODO: get this working on linux box:
    $THIS_DIR/../PWD_BIN/ruby_setup || exit_with_error "failed to set up prerequisites for my ruby code, such as gems"

    # pyenv/python
    echo "Installing latest pyenv"
    if on_mac_os;then
        homebrew_install_latest pyenv
    else
        exit_with_error "TODO: IMPLEMENT"
    fi

    echo "Installing python"
    echo n | pyenv install $(cat $SKIGGETY_UTILS_DIR/.python-version) # echoing n is to avoid reinstall

    # mark complete
    rm "$completed_markers_start_with"*
    touch "$completed_marker"
}

function on_mac_os {
    if uname -a | grep Darwin >/dev/null;then
        return 0
    else
        return 1
    fi
}

function homebrew_install_latest {
   target="$1"
   brew upgrade "$target" || brew install "$target" || accumulate_error "could not install latest $target with homebrew"
}

main "$@"
