#!/usr/bin/env bash

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

function main {
    for arg in "$@"; do
        shift
        case "$arg" in
            --non-interactive) set -- "$@" "-n" ;;
            *)                 set -- "$@" "$arg" ;;
        esac
    done

    # defaults
    interactive=true

    OPTIND=1
    while getopts ":inhi?" opt; do
        case "$opt" in
            "i") interactive=true ;;
            "n") interactive=false ;;
            "h") exit_with_error "TODO: print usage" ;;
            "?") exit_with_error "TODO: print usage" ;;
            *) ;;
        esac
    done

    # TODO?: echo "Installing $(basename $0)"
    # TODO^2: maybe install git? at this point we're assuming it's already installed and just going ahead with configuration. So...maybe just check the version and demand that the user take care of it? This should probably be lumped in with basic prerequisites, but maybe this installer could remain separate for setup only
    #   TODO^4: thinking about this further, asking the user to install the latest git would fit in perfectly with the basic
    #   prerequisites script because of the potential bootstrapping problems, but configuration would really benefit
    #   from marker files so we don't see 'Configuring git' every darn time we run update-skiggety-utils. We probably
    #   need to split this up, and we could call the installer git_configuration_only or something like that

    # TODO: install gitk? (brew install git-gui) on mac

    # TODO: check for marker file to avoid re-running
    echo "Configuring $(basename $0)"
    git-set-global-default 'credential.helper' 'cache --timeout=2592000'
    git-set-global-default 'push.default' 'current' # this pushes to branches of the same name by default, so you don't need to set upstream
    git-set-global-default 'pull.rebase' 'true'
    git-set-global-default 'rebase.autostash' 'true'
    git-set-global-default 'fetch.prune' 'true'
    git-set-global-default 'diff.colorMoved' 'zebra' # lines that moved but stayed the same have their own colors
    # git push || exit_with_error "git push failed"
}

function git-set-global-default {
    local key="$1"
    local value="$2"
    # TODO: local reason="$3"

    previous_value=$(git config --global --get $key)

    if [ "$value" != "$previous_value" ]; then
        if $interactive; then
            echo -n "Would you like to change the global git config value of '$key'${newline}    FROM '$previous_value'${newline}      TO '$value'${newline}       ? [Y/n]${newline}"
            read -n1 answer
            echo
            if [[ "${answer}" =~ ^[Yy] ]]; then
                git config --global "$key" "$value"
            fi
        else
            exit_with_error "Won't change global default git config \"$key\" to \"$value\" in non-interactive mode."
        fi
    fi
}

main "$@"
