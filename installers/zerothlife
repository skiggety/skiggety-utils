#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/installable_skiggety_util'

# TODO^140: (IN_PROGRESS, NOW) TEST this script

# TODO^114: and devote some thought to dependencies between Zerothlife and skiggety-utils
# - TODO^140: (IN_PROGRESS) make this, and maybe all installers, optional.  We could use marker files to keep track
#             of preferences

class ZerothLifeInstaller

  include InstallableSkiggetyUtil

  def code_dir
    # Assume that where skiggety utils is parked is where you want to check out code:
    File.dirname(ENV.fetch('SKIGGETY_UTILS_DIR', nil))
  end

  def install_dir
    "#{code_dir}/zerothlife"
  end

  def apparently_installed?
    Dir.exist?(install_dir)
  end

  def install!
    git_clone_latest('https://github.com/skiggety/zerothlife', install_dir)
    git_safe_pull(install_dir)
  end

  def apparently_configured?
    false # TODO: check for template bash include script as least as new as template
  end

  def configure!
    git_pull(install_dir)

    if $interactive

      # Add the new repo's bin dir to your path by copying and allowing the user to modify, a bash include script.
      # skiggety-utils should include it if it exists:
      delegate_diff_to_user(user_shell_config_path, template_shell_config_path) ||
        raise('User did not configure zerothlife bash include.')

      assert_system('zerothlife-setup')
    else
      raise_interactive_only_configuration
    end
  end

  def user_shell_config_path
    @user_shell_config_path ||= File.expand_path("#{install_dir}/config/include_in_bashrc.bash")
  end

  def template_shell_config_path
    self_config_path('include_in_bashrc.template.bash')
  end

end

ZerothLifeInstaller.run
