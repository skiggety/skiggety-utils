#!/usr/bin/env ruby

require_relative '../lib/installable_skiggety_util.rb'

class LocalBackupSetterUpper

  include InstallableSkiggetyUtil

  def apparently_installed?
    if on_mac_os?
      return program_version_option_output_matches?('tmutil', / 4\.0\.0 /) # TODO: update desired version # TODO TODO: how should I keep tabs on new versions of software, in general. Some automated way to watch for it and decide if I want it? maybe all installers expect a stanndardized method to check for updates?
    elsif on_linux_os?
      return true # TODO: IMPLEMENT
    else
      raise NotImplementedError, "TODO: implement this for this OS"
    end
  end

  # TODO TODO: make sure there was a backup in the last week? (is this the [only] place for this)
  def apparently_configured?
    if on_mac_os?
      backup_done_indicator = `tmutil status|grep Percent`
      return (backup_done_indicator =~ /Percent = 1;/ ).is_a?(Numeric).to_s
    elsif on_linux_os?
      return true # TODO: IMPLEMENT
    else
      raise NotImplementedError, "TODO: implement this for this OS"
    end
  end

  def install
    if on_mac_os?
      if $interactive
        delegate_to_user 'make sure Time Machine is installed'
      else
        raise "Cannot install Time Machine in non-interactive mode, user should run \"install-skiggety-utils\" or \"#{__FILE__}\"."
      end
    else
      raise NotImplementedError, "TODO: implement this for this OS"
    end
  end

  def configure
    if on_mac_os?
      if $interactive
        assert_system("open /System/Library/PreferencePanes/TimeMachine.prefPane")
        delegate_to_user 'set up time machine to make backups using the window that just opened automatically'
      else
        raise "Cannot configure Time Machine in non-interactive mode, user should run \"install-skiggety-utils\" or \"#{__FILE__}\"."
      end
    else
      raise NotImplementedError, "TODO: implement this for this OS"
    end
  end

end

LocalBackupSetterUpper.run
