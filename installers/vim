#!/usr/bin/env ruby
# frozen_string_literal: true

require_relative '../lib/installable_skiggety_util'

# TODO^3: install and set up vimpager as your pager, but maybe not in this installer
# TODO^2: install vim rake plugin with vim pathogen
# TODO: maybe detect local vimrc changes
# TODO^2: later, look at this and zerothlife installer and consider a bit of DRY

class VimInstaller

  include InstallableSkiggetyUtil

  def apparently_installed?
    # TODO: use File.join or something, not interploation for these:
    program_version_option_output_matches?('vim', / 9\.0 /) &&
      Dir.exist?("#{bundle_dir}/vim-rails") &&
      Dir.exist?("#{bundle_dir}/fzf.vim") &&
      Dir.exist?("#{bundle_dir}/nerdcommenter")
    # TODO: Dir.exist?("#{bundle_dir}/nerdtree")
    # TODO: Dir.exist?("#{bundle_dir}/vim-dispatch")
  end

  # TODO^4: we need some way of watching other files.  If they are newer than our marker file, we need a reinstall.
  # Like ~/.vimrc for example.  This will need to be a common installer feature.

  # Err on the side of returning false...if these files don't match perfectly
  # the user will have a chance to make sure it's set up right:
  def apparently_configured?
    return false unless File.exist?(user_vimrc_path)

    FileUtils.compare_file(user_vimrc_path, template_vimrc_path)
  end

  def install!
    unless in_docker_demo?
      if $interactive
        delegate_to_user 'make sure vim is installed by running \'vim -h\' or some such...'
      else
        raise_interactive_only_install
      end
    end

    brew_install_latest 'macvim' if on_mac_os?
    # TODO^2: install gvim (gui) for linux

    # we need these other programs installed to go much further since plugins depend on them:
    call_peer_installer('fzf')
    call_peer_installer('ripgrep')

    # installing pathogen means we can install other plugins by dropping them in the "bundle" directory:
    FileUtils.mkdir_p "#{Dir.home}/.vim/autoload"
    puts `curl -LSso ~/.vim/autoload/pathogen.vim https://tpo.pe/pathogen.vim`

    FileUtils.mkdir_p bundle_dir

    git_clone_latest('https://github.com/tpope/vim-rails.git', "#{bundle_dir}/vim-rails")

    git_clone_latest('https://github.com/junegunn/fzf.vim.git', "#{bundle_dir}/fzf.vim")
    # TODO?: vim-ripgrep & learn to use it (be careful, it seems to have it's own :Rg command that's different from
    # fzf.vim's)
    # TODO^9: learn to use nerdcommenter:
    # TODO: take a look at tabnine
    git_clone_latest('https://github.com/preservim/nerdcommenter.git', "#{bundle_dir}/nerdcommenter")
    # TODO: nerdtree
    # TODO: https://github.com/tpope/vim-dispatch

    mark_installed!
  end

  def bundle_dir
    "#{Dir.home}/.vim/bundle"
  end

  def configure!
    if $interactive
      # TODO: prompt the user with something to explain what they need to do:
      delegate_diff_to_user(user_vimrc_path, template_vimrc_path) || raise('User did not configure vim.')
      mark_configured! # force this, since you might want to leave some differences between your .vimrc and the template
    else
      raise_interactive_only_configuration
    end
  end

  def user_vimrc_path
    @user_vimrc_path ||= File.expand_path('~/.vimrc')
  end

  def template_vimrc_path
    self_config_path('vimrc')
  end

end

VimInstaller.run
