#!/usr/bin/env bash

# A script with this name in a PWD_BIN directory should do a complete continuous integration cycle, whatever that
# entails, printing concise useful output, and exit on 0 only on success.  This script does that for skiggety-utils.
# Use "review ci" or "review-ci" to make it run continuously.

# TODO^3: possible script renaming--ci means continuos.  This is just the integration part. "review-ci" could become
# "ci" and this would become what? "i"? Or maybe every scrtipt that does one cycle and is meant to be changed and used
# with review has a name that ends in "-cycle"? I dunno.  Something to think about.
#  # TODO: one idea is that 'ci' is something very high level that uses review heavily but probably uses it once to wait
#  for a commit, and overall is responsible for doing a git pull and calling something like 'integrate' (like what this
#  script is now) that mostly manages the running of 'dev', maybe specifying read-only mode or whatever.  'ci' should
#  also keep a prominent display of the latest commit or two with timestamps.
#    TODO^2: ...so rename this script 'integrate' to get the ball rolling?

# TODO: I think this script should save the output of dev and simply cat it if there is no update from git

# TODO^2: what if there are updates to the top-level ci script? should it re-exec itself?

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
. $THIS_DIR/../lib/include_in_bashrc.bash || exit 1
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

# TODO^5: accumulate error if any local changes are found, i.e. "maybe you want to run 'dev' instead of 'ci'? Do you want
# to commit these changes?'

git-pretty-pull || exit_with_error "git-pretty-pull FALED"

# TODO: ???: git restore --staged .

# TODO^5: ensure that the mere act of running ci doesn't cause local changes.  I'm looking at PWD_BIN/lint .
dev && echo "dev SUCCEEDED" || accumulate_error "dev FAILED"

# TODO^2: if there are git changes, complain that dev is not read-only

git restore todo_report

# SKIGGETY_DEBUG=true # TODO: come up with a format like what I have but with a timestamp and author included, then save
# the git log argument somewhere so I can use it in other git log commands like in git-pretty-pull, etc
echo_debug git log oneline:
git -c color.ui=always --no-pager log --oneline --decorate=short origin/HEAD~~..HEAD -n 3
# echo_debug git log pretty oneline:
# git -c color.ui=always --no-pager log --pretty=oneline --decorate=short origin/HEAD~~..HEAD -n 3
# echo_debug git log reference:
# git -c color.ui=always --no-pager log --pretty=reference --decorate=short origin/HEAD~~..HEAD -n 3
# echo_debug stack overflow answer:
# git -c color.ui=always --no-pager log --pretty=format:"%h%x09%an%x09%ad%x09%s" origin/HEAD~~..HEAD -n 3
# echo_debug colorful stack overflow answer from comment:
# git -c color.ui=always --no-pager log --pretty=format:'%C(yellow)%h|%Cred%ad|%Cblue%an|%Cgreen%d %Creset%s' origin/HEAD~~..HEAD -n 3

exit_with_any_accumulated_errors
