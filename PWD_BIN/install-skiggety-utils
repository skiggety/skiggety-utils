#!/usr/bin/env bash

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
. $THIS_DIR/../lib/skiggety-utils.bash || exit 1

# This script installs skiggety-utils, and does all setup necessary to set up a workstation the way skiggety likes it. Some of this is automatic, and some of this will be delegated back to the user to do manually with guidance.

# NOTE: This is in bash because other scripting languages might not be installed yet

# TODO: careful mode, ask user for confirmation as you go. Might make it easier for others 

# TODO^2: move to bin? I need to make sure I can run it independently of $PWD, though

# TODO: install and configure 3rd party programs
    # TODO: install pocket
    # TODO^4: install docker/kubernetes
    # TODO^2: install custom list app (opens dedicated browser window "as an app") (huh?)
    # TODO^2: install a music player of some sort
    # TODO: install/config chrome tab scheduler and/or other stuff to enable a some kind of dashboard in a web browser
    # TODO: install moreutils (http://joeyh.name/code/moreutils/)?

function main {
    for arg in "$@"; do
        shift
        case "$arg" in
            --non-interactive) set -- "$@" "-n" ;;
            *)                 set -- "$@" "$arg" ;;
        esac
    done

    # defaults
    interactive=true

    # TODO: add an option to reinstall, meaning delete installers/.markers/*_with_version* first
    #   TODO: have update-skiggety-utils support this option, too
    OPTIND=1
    while getopts ":inhi?" opt; do
        case "$opt" in
            "i") interactive=true ;;
            "n") interactive=false ;;
            "h") exit_with_error "TODO: print usage" ;;
            "?") exit_with_error "TODO: print usage" ;;
            *) ;;
        esac
    done

    local INSTALLER_ARGS=""
    if $interactive; then
        debug_here "running interactively"
        INSTALLER_ARGS=""
    else
        # TODO: make sure that when you run "review install-skiggety-utils", this is in non-interactive mode:
        debug_here "NOT running interactively"
        INSTALLER_ARGS="--non-interactive"
    fi

    INSTALLERS_DIR="$(cd "$THIS_DIR/../installers";pwd)"

    debug_here "about to run installers..."

    debug_here "running installer: $INSTALLERS_DIR/skiggety.bash"
    use_installer_unsafe "$INSTALLERS_DIR/skiggety.bash" $INSTALLER_ARGS || exit_with_error "failed to set up bash"
    debug_here "reloading environment..."
    . ~/.bashrc # reload environment

    debug_here "running installer: $INSTALLERS_DIR/basic_prerequisites"
    use_installer_unsafe "$INSTALLERS_DIR/basic_prerequisites" $INSTALLER_ARGS || exit_with_error "failed to set up basic prerequisites for other installers to run"
    debug_here "reloading environment..."
    . ~/.bashrc # reload environment

    debug_here "about to run rest of installers..."
    for installer in "$INSTALLERS_DIR"/*; do
        if [ -f "$installer" ]; then
            debug_here "running installer: $installer"
            use_installer "$installer" $INSTALLER_ARGS || accumulate_error
        fi
    done

    exit_if_any_accumulated_errors
    echo "$(basename $0) COMPLETE."
}

# this function runs the installer, checks the exit code, prints context/formatting around it, perhaps remembers if it has already succeeded.
function use_installer {
    local installer_path="$1"
    local INSTALLER_ARGS="$2"
    installer="$(basename $installer_path)"

    if [[ "$installer" == "skiggety.bash" ||
          "$installer" == "basic_prerequisites" ||
          # TODO^3: DELETE this temporary special-case cruft as soon as I can, probably when this gets rewritten in a real language:
          "$installer" == "jiggler" ||
          "$installer" == "misc_utils" ||
          "$installer" == "ssh-agent" ||
          "$installer" == "synergy" ]]; then
        # TODO: debug_here "skipping \"$installer\" installer for now..."
        return 0
    else
        use_installer_unsafe "$@"
        return $?
        fi
}

function use_installer_unsafe {
    local installer_path="$1"
    local INSTALLER_ARGS="$2"
    installer="$(basename $installer_path)"

    echo_debug "running installer \"$installer\"..."
    $installer_path $INSTALLER_ARGS || { echo_error_here "installer \"$installer\" FAILED"; return 1; }
}

main "$@"
