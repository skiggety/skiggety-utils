#!/usr/bin/env bash

# this script prints a summary of the status of development (or whatever) in the current directory, including information about git, todo's, tests, etc. it can often simply call default_dashboard from the path

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

# Less important than the output of default_dashboard:
# echo_divider "-"
# grep -Rn "# This script" .
# pretty_sleep 10 || sleep 10

echo_divider_with_text "O-=======-" "Dashboard for $(duh) :"

# show diff with old mac files: # TODO^3: work on this diff:
if ! [ -z "$SKIGGETY_UTILS_DONOR_DIR" ]; then
    echo_divider_with_text "+-=======-" "diff summary for \"$SKIGGETY_UTILS_DONOR_DIR\":"
    diff -rq --exclude=.DS_Store --exclude=.git $THIS_DIR/.. $SKIGGETY_UTILS_DONOR_DIR | grep -v "^Only in $THIS_DIR/.." | head -n 5
fi

bin/default_dashboard || accumulate_error

# TODO?: tell you what command to run to commit changes or whatever
# TODO?: graph score over time (see program "progress")

# TODO: DELETE redundant rubocop call, it is alredy called in PWD_BIN/lint . But hold off until lint
# calls it with || exit_with_error:
echo_divider_with_text "-=" "rubocop"
rm -f rubocop_output.txt
bundle exec rubocop --parallel --color -o rubocop_output.txt || accumulate_error "rubocop FAILED"
cat rubocop_output.txt
rm rubocop_output.txt

# More important than the output of default_dashboard:

exit_if_any_accumulated_errors

experiment_script="./PWD_BIN/experiment.gitignored.bash"
if ! [ -f "$experiment_script" ]; then
    echo "#!$(which env) bash" > "$experiment_script"
    echo "# TODO: edit this for dashboard output" >> "$experiment_script" # IGNORE_TODO
    chmod +x "$experiment_script"
fi

if [ -f "$experiment_script" ]; then
    # TODO: only show this divider if there will be output below:
    echo_divider_with_text "=" "running \"$experiment_script\" :"
    $experiment_script || accumulate_error
fi

exit_if_any_accumulated_errors
