#!/usr/bin/env bash

# This script prints a summary of the status of development (or whatever) in the current directory, including
# information about git, todo's, tests, etc.  It can often simply call default_dashboard from the path.

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash || exit 1

echo_divider_with_text "O-=======-" "'dashboard' for $(duh) :"

# show diff with old mac files: # TODO^5: work on this diff:
if ! [ -z "$SKIGGETY_UTILS_DONOR_DIR" ]; then
    echo_divider_with_text "+-=======-" "diff summary for \"$SKIGGETY_UTILS_DONOR_DIR\":"
    diff -rq --exclude=.DS_Store --exclude=.git $THIS_DIR/.. $SKIGGETY_UTILS_DONOR_DIR | grep -v "^Only in $THIS_DIR/.." | grep --color=always '\(differ\|Only\)' | abbreviate -l 5
fi

bin/default_dashboard || accumulate_error "default_dashboard FAILED"
# Everything after this point in the script should be more important than the output of default_dashboard since it can
# bump it off the screen....:

# show todo's:
if [ -f ./todo_report/README_in_color.txt ]; then
    cat ./todo_report/README_in_color.txt
else
    echo_divider_with_text "=" "TODO's" # IGNORE_TODO
    # purposely call whatever 'todo' is in the path in case you are overriding it with a 'PWD_BIN/todo' script:
    todo --color always | abbreviate -n 4 -t "TODO's" -d || exit_with_error "todo FAILED" # IGNORE_TODO
fi

# TODO^2?: tell you what command to run to commit changes or whatever
# TODO^2?: graph score over time (see program "progress")

# TODO^10: maybe use this in 'vital' to keep your tag count under control:
function limit-todo-with-keyword-count {
    MAX_COUNT="$1"
    KEYWORD="$2"

    KEYWORD_USAGES="$(todo | grep $KEYWORD )"
    KEYWORD_USAGE_COUNT=$(echo "$KEYWORD_USAGES" | wc -l | bc )

    echo "$KEYWORD_USAGE_COUNT todo's found marked '$KEYWORD'"
    if [ "$KEYWORD_USAGE_COUNT" -gt "$MAX_COUNT" ]; then
        EXCESS_COUNT="$(( $KEYWORD_USAGE_COUNT - $MAX_COUNT))"
        echo
        echo_error "$KEYWORD_USAGE_COUNT is ($EXCESS_COUNT) too many todo's marked '$KEYWORD' (the max is $MAX_COUNT):"

        echo "---------------------------------------------------------"
        echo "$KEYWORD_USAGES" | head -n $EXCESS_COUNT
        echo_error "---- $KEYWORD LIMIT ---- (everything above here is excessive todo's marked '$KEYWORD')"
        echo "$KEYWORD_USAGES" | tail -n $MAX_COUNT
        echo "---------------------------------------------------------"

        accumulate_error "$EXCESS_COUNT too many $KEYWORD todo's found, such as: $(echo "$KEYWORD_USAGES" | head -n 1)"
    fi
}

limit-todo-with-keyword-count 8 'IN_''PROGRESS' # TODO^31: fine tunethis number
limit-todo-with-keyword-count 2 'N''OW'
# TODO^5: maybe also make sure that lines that contain (all capitalized, not shown here so as not to tag this todo) 'todo' and 'now' also contain 'in_progress

echo_divider_with_text "O-=======-" "END of 'dashboard' for $(duh) :"

exit_with_any_accumulated_errors
