#!/usr/bin/env bash

# Safely try out a docker container with skiggety utils installed, to see what it's like
# without affecting your machine

THIS_DIR="$(cd "$(dirname $BASH_SOURCE)";pwd)"
SKIGGETY_UTILS_DIR="$THIS_DIR"
. $SKIGGETY_UTILS_DIR/lib/skiggety-utils.bash
SKIGGETY_DEBUG=true

if [ -f /.in_docker_demo ]; then
    exit_with_error "You are already in the docker demo."
fi

if ! ls installers/.markers/docker.configured_with_version* installers/.markers/docker.installed_with_version*; then
    ./bin/ask_user "Make sure Docker is installed and running in the background" || exit_with_error "Could not install Docker"
fi

cd $SKIGGETY_UTILS_DIR || exit_with_error "Could not find \$SKIGGETY_UTILS_DIR"

echo 'Building docker image...'
docker build -t skiggety-utils-box --progress plain . || exit_with_error "docker build failed"
echo '...done building docker image.'
echo

MARKER_DIR=/tmp/skiggety-utils-demo-installer-markers.pid_$$
rm -rf "$MARKER_DIR"
mkdir -p "$MARKER_DIR"

cat todo_report/README_in_color.txt
echo
ls
echo
# TODO: perhaps figure out how to get by without this extra step:
echo "Run 'install-skiggety-utils; bash; exit' because you need a fresh bash after install for prompt and other env"
echo "...then read README.md and try running  './start', 'chbs', or 'review-dev', for example "
echo

# TODO^2: try using docker compose for this:
docker run --rm -it --entrypoint bash \
    -v "${SKIGGETY_UTILS_DIR}:/code/skiggety-utils" \
    -v "${MARKER_DIR}:/code/skiggety-utils/installers/.markers" \
    skiggety-utils-box

# TODO: run a shell with a helpful intro message in the docker container

# TODO: after you implement this, figure out what the shortest one liner is to checkout skiggety utils, and run this
# script.
